
Motor_positionControl_128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000130e  000013a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000130e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  0080010a  0080010a  000013ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a7d  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf4  00000000  00000000  00002fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c00  00000000  00000000  00003cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  000048b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000839  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014bf  00000000  00000000  00005589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006a48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c3       	rjmp	.+1644   	; 0x6b6 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c3       	rjmp	.+1770   	; 0x740 <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e0       	ldi	r30, 0x0E	; 14
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 30       	cpi	r26, 0x0A	; 10
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e0       	ldi	r26, 0x0A	; 10
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3d       	cpi	r26, 0xDE	; 222
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	eb d0       	rcall	.+470    	; 0x29a <main>
      c4:	0c 94 85 09 	jmp	0x130a	; 0x130a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ADC_init>:
	(GET_BIT(ADCSRA,ADIF));
	SET_BIT(ADCSRA,ADIF);*/
	//SET_BIT(SFIOR,ADTS1);
	
	return ADCW ;
}
      ca:	86 b1       	in	r24, 0x06	; 6
      cc:	86 60       	ori	r24, 0x06	; 6
      ce:	86 b9       	out	0x06, r24	; 6
      d0:	3e 9a       	sbi	0x07, 6	; 7
      d2:	33 9a       	sbi	0x06, 3	; 6
      d4:	37 9a       	sbi	0x06, 7	; 6
      d6:	36 9a       	sbi	0x06, 6	; 6
      d8:	08 95       	ret

000000da <ADC_startConversion>:

void ADC_startConversion(void)
{
	ADCSRA |=(1<<ADSC) ;
      da:	36 9a       	sbi	0x06, 6	; 6
      dc:	08 95       	ret

000000de <driveMotor>:
float calc_Angle(float ADC_value)
{
	float Angle = 0;
	Angle = 360 * ADC_value / 1024;
	return Angle;
}
      de:	18 16       	cp	r1, r24
      e0:	19 06       	cpc	r1, r25
      e2:	5c f4       	brge	.+22     	; 0xfa <driveMotor+0x1c>
      e4:	aa 9a       	sbi	0x15, 2	; 21
      e6:	89 32       	cpi	r24, 0x29	; 41
      e8:	91 05       	cpc	r25, r1
      ea:	14 f0       	brlt	.+4      	; 0xf0 <driveMotor+0x12>
      ec:	88 e2       	ldi	r24, 0x28	; 40
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
      f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
      f8:	16 c0       	rjmp	.+44     	; 0x126 <driveMotor+0x48>
      fa:	aa 98       	cbi	0x15, 2	; 21
      fc:	9c 01       	movw	r18, r24
      fe:	99 23       	and	r25, r25
     100:	24 f4       	brge	.+8      	; 0x10a <driveMotor+0x2c>
     102:	22 27       	eor	r18, r18
     104:	33 27       	eor	r19, r19
     106:	28 1b       	sub	r18, r24
     108:	39 0b       	sbc	r19, r25
     10a:	33 23       	and	r19, r19
     10c:	34 f0       	brlt	.+12     	; 0x11a <driveMotor+0x3c>
     10e:	29 32       	cpi	r18, 0x29	; 41
     110:	31 05       	cpc	r19, r1
     112:	2c f0       	brlt	.+10     	; 0x11e <driveMotor+0x40>
     114:	28 e2       	ldi	r18, 0x28	; 40
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <driveMotor+0x40>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     122:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     126:	16 16       	cp	r1, r22
     128:	17 06       	cpc	r1, r23
     12a:	5c f4       	brge	.+22     	; 0x142 <driveMotor+0x64>
     12c:	ab 9a       	sbi	0x15, 3	; 21
     12e:	69 32       	cpi	r22, 0x29	; 41
     130:	71 05       	cpc	r23, r1
     132:	14 f0       	brlt	.+4      	; 0x138 <driveMotor+0x5a>
     134:	68 e2       	ldi	r22, 0x28	; 40
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     13c:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     140:	16 c0       	rjmp	.+44     	; 0x16e <driveMotor+0x90>
     142:	ab 98       	cbi	0x15, 3	; 21
     144:	cb 01       	movw	r24, r22
     146:	99 23       	and	r25, r25
     148:	24 f4       	brge	.+8      	; 0x152 <driveMotor+0x74>
     14a:	88 27       	eor	r24, r24
     14c:	99 27       	eor	r25, r25
     14e:	86 1b       	sub	r24, r22
     150:	97 0b       	sbc	r25, r23
     152:	99 23       	and	r25, r25
     154:	34 f0       	brlt	.+12     	; 0x162 <driveMotor+0x84>
     156:	89 32       	cpi	r24, 0x29	; 41
     158:	91 05       	cpc	r25, r1
     15a:	2c f0       	brlt	.+10     	; 0x166 <driveMotor+0x88>
     15c:	88 e2       	ldi	r24, 0x28	; 40
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <driveMotor+0x88>
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     16a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     16e:	14 16       	cp	r1, r20
     170:	15 06       	cpc	r1, r21
     172:	5c f4       	brge	.+22     	; 0x18a <driveMotor+0xac>
     174:	ac 9a       	sbi	0x15, 4	; 21
     176:	49 32       	cpi	r20, 0x29	; 41
     178:	51 05       	cpc	r21, r1
     17a:	14 f0       	brlt	.+4      	; 0x180 <driveMotor+0xa2>
     17c:	48 e2       	ldi	r20, 0x28	; 40
     17e:	50 e0       	ldi	r21, 0x00	; 0
     180:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     184:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     188:	08 95       	ret
     18a:	ac 98       	cbi	0x15, 4	; 21
     18c:	ca 01       	movw	r24, r20
     18e:	99 23       	and	r25, r25
     190:	24 f4       	brge	.+8      	; 0x19a <driveMotor+0xbc>
     192:	88 27       	eor	r24, r24
     194:	99 27       	eor	r25, r25
     196:	84 1b       	sub	r24, r20
     198:	95 0b       	sbc	r25, r21
     19a:	99 23       	and	r25, r25
     19c:	34 f0       	brlt	.+12     	; 0x1aa <driveMotor+0xcc>
     19e:	89 32       	cpi	r24, 0x29	; 41
     1a0:	91 05       	cpc	r25, r1
     1a2:	2c f0       	brlt	.+10     	; 0x1ae <driveMotor+0xd0>
     1a4:	88 e2       	ldi	r24, 0x28	; 40
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <driveMotor+0xd0>
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     1b2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     1b6:	08 95       	ret

000001b8 <init_MotorController>:
     1b8:	13 9a       	sbi	0x02, 3	; 2
     1ba:	14 9a       	sbi	0x02, 4	; 2
     1bc:	15 9a       	sbi	0x02, 5	; 2
     1be:	84 b3       	in	r24, 0x14	; 20
     1c0:	8c 61       	ori	r24, 0x1C	; 28
     1c2:	84 bb       	out	0x14, r24	; 20
     1c4:	08 95       	ret

000001c6 <USART_init>:
     1c6:	81 11       	cpse	r24, r1
     1c8:	0c c0       	rjmp	.+24     	; 0x1e2 <USART_init+0x1c>
     1ca:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     1ce:	80 e1       	ldi	r24, 0x10	; 16
     1d0:	89 b9       	out	0x09, r24	; 9
     1d2:	88 e9       	ldi	r24, 0x98	; 152
     1d4:	8a b9       	out	0x0a, r24	; 10
     1d6:	e5 e9       	ldi	r30, 0x95	; 149
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	86 60       	ori	r24, 0x06	; 6
     1de:	80 83       	st	Z, r24
     1e0:	08 95       	ret
     1e2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     1e6:	80 e1       	ldi	r24, 0x10	; 16
     1e8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     1ec:	88 e1       	ldi	r24, 0x18	; 24
     1ee:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     1f2:	ed e9       	ldi	r30, 0x9D	; 157
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	86 60       	ori	r24, 0x06	; 6
     1fa:	80 83       	st	Z, r24
     1fc:	08 95       	ret

000001fe <USART_Transmit>:
     1fe:	61 11       	cpse	r22, r1
     200:	04 c0       	rjmp	.+8      	; 0x20a <USART_Transmit+0xc>
     202:	5d 9b       	sbis	0x0b, 5	; 11
     204:	fe cf       	rjmp	.-4      	; 0x202 <USART_Transmit+0x4>
     206:	8c b9       	out	0x0c, r24	; 12
     208:	08 95       	ret
     20a:	eb e9       	ldi	r30, 0x9B	; 155
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	90 81       	ld	r25, Z
     210:	95 ff       	sbrs	r25, 5
     212:	fd cf       	rjmp	.-6      	; 0x20e <USART_Transmit+0x10>
     214:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     218:	08 95       	ret

0000021a <USART_Transmit_int>:
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	2a 97       	sbiw	r28, 0x0a	; 10
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
     232:	06 2f       	mov	r16, r22
     234:	4a e0       	ldi	r20, 0x0A	; 10
     236:	be 01       	movw	r22, r28
     238:	6f 5f       	subi	r22, 0xFF	; 255
     23a:	7f 4f       	sbci	r23, 0xFF	; 255
     23c:	0e 94 4a 09 	call	0x1294	; 0x1294 <__itoa_ncheck>
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	88 23       	and	r24, r24
     244:	69 f0       	breq	.+26     	; 0x260 <USART_Transmit_int+0x46>
     246:	10 e0       	ldi	r17, 0x00	; 0
     248:	60 2f       	mov	r22, r16
     24a:	d9 df       	rcall	.-78     	; 0x1fe <USART_Transmit>
     24c:	1f 5f       	subi	r17, 0xFF	; 255
     24e:	e1 e0       	ldi	r30, 0x01	; 1
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ec 0f       	add	r30, r28
     254:	fd 1f       	adc	r31, r29
     256:	e1 0f       	add	r30, r17
     258:	f1 1d       	adc	r31, r1
     25a:	80 81       	ld	r24, Z
     25c:	81 11       	cpse	r24, r1
     25e:	f4 cf       	rjmp	.-24     	; 0x248 <USART_Transmit_int+0x2e>
     260:	2a 96       	adiw	r28, 0x0a	; 10
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	08 95       	ret

00000276 <USART_Transmit_string>:
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	ec 01       	movw	r28, r24
     27e:	88 81       	ld	r24, Y
     280:	88 23       	and	r24, r24
     282:	39 f0       	breq	.+14     	; 0x292 <USART_Transmit_string+0x1c>
     284:	16 2f       	mov	r17, r22
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	61 2f       	mov	r22, r17
     28a:	b9 df       	rcall	.-142    	; 0x1fe <USART_Transmit>
     28c:	89 91       	ld	r24, Y+
     28e:	81 11       	cpse	r24, r1
     290:	fb cf       	rjmp	.-10     	; 0x288 <USART_Transmit_string+0x12>
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	08 95       	ret

0000029a <main>:
     29a:	7b d5       	rcall	.+2806   	; 0xd92 <init_loop_timer>
     29c:	81 d5       	rcall	.+2818   	; 0xda0 <int_PWM_timers>
     29e:	8c df       	rcall	.-232    	; 0x1b8 <init_MotorController>
     2a0:	14 df       	rcall	.-472    	; 0xca <ADC_init>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 df       	rcall	.-224    	; 0x1c6 <USART_init>
     2a6:	78 94       	sei
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f6 eb       	ldi	r31, 0xB6	; 182
     2ac:	cf 2e       	mov	r12, r31
     2ae:	f3 ef       	ldi	r31, 0xF3	; 243
     2b0:	df 2e       	mov	r13, r31
     2b2:	fd ef       	ldi	r31, 0xFD	; 253
     2b4:	ef 2e       	mov	r14, r31
     2b6:	fc e3       	ldi	r31, 0x3C	; 60
     2b8:	ff 2e       	mov	r15, r31
     2ba:	f0 2d       	mov	r31, r0
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	98 01       	movw	r18, r16
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	60 ea       	ldi	r22, 0xA0	; 160
     2c8:	70 e4       	ldi	r23, 0x40	; 64
     2ca:	88 e5       	ldi	r24, 0x58	; 88
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	27 d4       	rcall	.+2126   	; 0xb1e <pid_init>
     2d0:	cc e0       	ldi	r28, 0x0C	; 12
     2d2:	d1 e0       	ldi	r29, 0x01	; 1
     2d4:	48 81       	ld	r20, Y
     2d6:	59 81       	ldd	r21, Y+1	; 0x01
     2d8:	6a 81       	ldd	r22, Y+2	; 0x02
     2da:	7b 81       	ldd	r23, Y+3	; 0x03
     2dc:	88 e5       	ldi	r24, 0x58	; 88
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	46 d4       	rcall	.+2188   	; 0xb6e <pid_set>
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	10 e0       	ldi	r17, 0x00	; 0
     2e6:	98 01       	movw	r18, r16
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	60 ea       	ldi	r22, 0xA0	; 160
     2ee:	70 e4       	ldi	r23, 0x40	; 64
     2f0:	8e e7       	ldi	r24, 0x7E	; 126
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	14 d4       	rcall	.+2088   	; 0xb1e <pid_init>
     2f6:	4c 81       	ldd	r20, Y+4	; 0x04
     2f8:	5d 81       	ldd	r21, Y+5	; 0x05
     2fa:	6e 81       	ldd	r22, Y+6	; 0x06
     2fc:	7f 81       	ldd	r23, Y+7	; 0x07
     2fe:	8e e7       	ldi	r24, 0x7E	; 126
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	35 d4       	rcall	.+2154   	; 0xb6e <pid_set>
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	98 01       	movw	r18, r16
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	60 ea       	ldi	r22, 0xA0	; 160
     310:	70 e4       	ldi	r23, 0x40	; 64
     312:	84 ea       	ldi	r24, 0xA4	; 164
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	03 d4       	rcall	.+2054   	; 0xb1e <pid_init>
     318:	48 85       	ldd	r20, Y+8	; 0x08
     31a:	59 85       	ldd	r21, Y+9	; 0x09
     31c:	6a 85       	ldd	r22, Y+10	; 0x0a
     31e:	7b 85       	ldd	r23, Y+11	; 0x0b
     320:	84 ea       	ldi	r24, 0xA4	; 164
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	24 d4       	rcall	.+2120   	; 0xb6e <pid_set>
     326:	2f ef       	ldi	r18, 0xFF	; 255
     328:	83 ed       	ldi	r24, 0xD3	; 211
     32a:	90 e3       	ldi	r25, 0x30	; 48
     32c:	21 50       	subi	r18, 0x01	; 1
     32e:	80 40       	sbci	r24, 0x00	; 0
     330:	90 40       	sbci	r25, 0x00	; 0
     332:	e1 f7       	brne	.-8      	; 0x32c <main+0x92>
     334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x9c>
     336:	00 00       	nop
     338:	e4 e2       	ldi	r30, 0x24	; 36
     33a:	f1 e0       	ldi	r31, 0x01	; 1
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	a2 81       	ldd	r26, Z+2	; 0x02
     342:	b3 81       	ldd	r27, Z+3	; 0x03
     344:	88 83       	st	Y, r24
     346:	99 83       	std	Y+1, r25	; 0x01
     348:	aa 83       	std	Y+2, r26	; 0x02
     34a:	bb 83       	std	Y+3, r27	; 0x03
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	95 81       	ldd	r25, Z+5	; 0x05
     350:	a6 81       	ldd	r26, Z+6	; 0x06
     352:	b7 81       	ldd	r27, Z+7	; 0x07
     354:	8c 83       	std	Y+4, r24	; 0x04
     356:	9d 83       	std	Y+5, r25	; 0x05
     358:	ae 83       	std	Y+6, r26	; 0x06
     35a:	bf 83       	std	Y+7, r27	; 0x07
     35c:	80 85       	ldd	r24, Z+8	; 0x08
     35e:	91 85       	ldd	r25, Z+9	; 0x09
     360:	a2 85       	ldd	r26, Z+10	; 0x0a
     362:	b3 85       	ldd	r27, Z+11	; 0x0b
     364:	88 87       	std	Y+8, r24	; 0x08
     366:	99 87       	std	Y+9, r25	; 0x09
     368:	aa 87       	std	Y+10, r26	; 0x0a
     36a:	bb 87       	std	Y+11, r27	; 0x0b
     36c:	6f 01       	movw	r12, r30
     36e:	7e 01       	movw	r14, r28
     370:	ce e1       	ldi	r28, 0x1E	; 30
     372:	d1 e0       	ldi	r29, 0x01	; 1
     374:	8c b5       	in	r24, 0x2c	; 44
     376:	9d b5       	in	r25, 0x2d	; 45
     378:	80 31       	cpi	r24, 0x10	; 16
     37a:	97 42       	sbci	r25, 0x27	; 39
     37c:	d8 f3       	brcs	.-10     	; 0x374 <main+0xda>
     37e:	6c b5       	in	r22, 0x2c	; 44
     380:	7d b5       	in	r23, 0x2d	; 45
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	2e d6       	rcall	.+3164   	; 0xfe4 <__floatunsisf>
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	34 e2       	ldi	r19, 0x24	; 36
     38c:	44 e7       	ldi	r20, 0x74	; 116
     38e:	59 e4       	ldi	r21, 0x49	; 73
     390:	90 d5       	rcall	.+2848   	; 0xeb2 <__divsf3>
     392:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <dt>
     396:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <dt+0x1>
     39a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <dt+0x2>
     39e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <dt+0x3>
     3a2:	1d bc       	out	0x2d, r1	; 45
     3a4:	1c bc       	out	0x2c, r1	; 44
     3a6:	80 90 54 01 	lds	r8, 0x0154	; 0x800154 <dt>
     3aa:	90 90 55 01 	lds	r9, 0x0155	; 0x800155 <dt+0x1>
     3ae:	a0 90 56 01 	lds	r10, 0x0156	; 0x800156 <dt+0x2>
     3b2:	b0 90 57 01 	lds	r11, 0x0157	; 0x800157 <dt+0x3>
     3b6:	f6 01       	movw	r30, r12
     3b8:	60 81       	ld	r22, Z
     3ba:	71 81       	ldd	r23, Z+1	; 0x01
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
     3be:	93 81       	ldd	r25, Z+3	; 0x03
     3c0:	e0 d5       	rcall	.+3008   	; 0xf82 <__fixsfsi>
     3c2:	07 2e       	mov	r0, r23
     3c4:	00 0c       	add	r0, r0
     3c6:	88 0b       	sbc	r24, r24
     3c8:	99 0b       	sbc	r25, r25
     3ca:	0e d6       	rcall	.+3100   	; 0xfe8 <__floatsisf>
     3cc:	f7 01       	movw	r30, r14
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	04 d5       	rcall	.+2568   	; 0xde0 <__subsf3>
     3d8:	ab 01       	movw	r20, r22
     3da:	bc 01       	movw	r22, r24
     3dc:	95 01       	movw	r18, r10
     3de:	84 01       	movw	r16, r8
     3e0:	88 e5       	ldi	r24, 0x58	; 88
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	d2 d3       	rcall	.+1956   	; 0xb8a <pid_calculate>
     3e6:	cd d5       	rcall	.+2970   	; 0xf82 <__fixsfsi>
     3e8:	79 83       	std	Y+1, r23	; 0x01
     3ea:	68 83       	st	Y, r22
     3ec:	80 90 54 01 	lds	r8, 0x0154	; 0x800154 <dt>
     3f0:	90 90 55 01 	lds	r9, 0x0155	; 0x800155 <dt+0x1>
     3f4:	a0 90 56 01 	lds	r10, 0x0156	; 0x800156 <dt+0x2>
     3f8:	b0 90 57 01 	lds	r11, 0x0157	; 0x800157 <dt+0x3>
     3fc:	f6 01       	movw	r30, r12
     3fe:	64 81       	ldd	r22, Z+4	; 0x04
     400:	75 81       	ldd	r23, Z+5	; 0x05
     402:	86 81       	ldd	r24, Z+6	; 0x06
     404:	97 81       	ldd	r25, Z+7	; 0x07
     406:	bd d5       	rcall	.+2938   	; 0xf82 <__fixsfsi>
     408:	07 2e       	mov	r0, r23
     40a:	00 0c       	add	r0, r0
     40c:	88 0b       	sbc	r24, r24
     40e:	99 0b       	sbc	r25, r25
     410:	eb d5       	rcall	.+3030   	; 0xfe8 <__floatsisf>
     412:	f7 01       	movw	r30, r14
     414:	24 81       	ldd	r18, Z+4	; 0x04
     416:	35 81       	ldd	r19, Z+5	; 0x05
     418:	46 81       	ldd	r20, Z+6	; 0x06
     41a:	57 81       	ldd	r21, Z+7	; 0x07
     41c:	e1 d4       	rcall	.+2498   	; 0xde0 <__subsf3>
     41e:	ab 01       	movw	r20, r22
     420:	bc 01       	movw	r22, r24
     422:	95 01       	movw	r18, r10
     424:	84 01       	movw	r16, r8
     426:	8e e7       	ldi	r24, 0x7E	; 126
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	af d3       	rcall	.+1886   	; 0xb8a <pid_calculate>
     42c:	aa d5       	rcall	.+2900   	; 0xf82 <__fixsfsi>
     42e:	7b 83       	std	Y+3, r23	; 0x03
     430:	6a 83       	std	Y+2, r22	; 0x02
     432:	80 90 54 01 	lds	r8, 0x0154	; 0x800154 <dt>
     436:	90 90 55 01 	lds	r9, 0x0155	; 0x800155 <dt+0x1>
     43a:	a0 90 56 01 	lds	r10, 0x0156	; 0x800156 <dt+0x2>
     43e:	b0 90 57 01 	lds	r11, 0x0157	; 0x800157 <dt+0x3>
     442:	f6 01       	movw	r30, r12
     444:	60 85       	ldd	r22, Z+8	; 0x08
     446:	71 85       	ldd	r23, Z+9	; 0x09
     448:	82 85       	ldd	r24, Z+10	; 0x0a
     44a:	93 85       	ldd	r25, Z+11	; 0x0b
     44c:	9a d5       	rcall	.+2868   	; 0xf82 <__fixsfsi>
     44e:	07 2e       	mov	r0, r23
     450:	00 0c       	add	r0, r0
     452:	88 0b       	sbc	r24, r24
     454:	99 0b       	sbc	r25, r25
     456:	c8 d5       	rcall	.+2960   	; 0xfe8 <__floatsisf>
     458:	f7 01       	movw	r30, r14
     45a:	20 85       	ldd	r18, Z+8	; 0x08
     45c:	31 85       	ldd	r19, Z+9	; 0x09
     45e:	42 85       	ldd	r20, Z+10	; 0x0a
     460:	53 85       	ldd	r21, Z+11	; 0x0b
     462:	be d4       	rcall	.+2428   	; 0xde0 <__subsf3>
     464:	ab 01       	movw	r20, r22
     466:	bc 01       	movw	r22, r24
     468:	95 01       	movw	r18, r10
     46a:	84 01       	movw	r16, r8
     46c:	84 ea       	ldi	r24, 0xA4	; 164
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	8c d3       	rcall	.+1816   	; 0xb8a <pid_calculate>
     472:	87 d5       	rcall	.+2830   	; 0xf82 <__fixsfsi>
     474:	7d 83       	std	Y+5, r23	; 0x05
     476:	6c 83       	std	Y+4, r22	; 0x04
     478:	2a 81       	ldd	r18, Y+2	; 0x02
     47a:	3b 81       	ldd	r19, Y+3	; 0x03
     47c:	ab 01       	movw	r20, r22
     47e:	b9 01       	movw	r22, r18
     480:	88 81       	ld	r24, Y
     482:	99 81       	ldd	r25, Y+1	; 0x01
     484:	2c de       	rcall	.-936    	; 0xde <driveMotor>
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	ba 01       	movw	r22, r20
     48c:	88 e5       	ldi	r24, 0x58	; 88
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	6e d3       	rcall	.+1756   	; 0xb6e <pid_set>
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	ba 01       	movw	r22, r20
     498:	8e e7       	ldi	r24, 0x7E	; 126
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	68 d3       	rcall	.+1744   	; 0xb6e <pid_set>
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	ba 01       	movw	r22, r20
     4a4:	84 ea       	ldi	r24, 0xA4	; 164
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	62 d3       	rcall	.+1732   	; 0xb6e <pid_set>
     4aa:	64 cf       	rjmp	.-312    	; 0x374 <main+0xda>

000004ac <receiveAngles>:

void receiveAngles(char *str,float *receivedSetPoints)
{
     4ac:	4f 92       	push	r4
     4ae:	5f 92       	push	r5
     4b0:	6f 92       	push	r6
     4b2:	7f 92       	push	r7
     4b4:	8f 92       	push	r8
     4b6:	9f 92       	push	r9
     4b8:	af 92       	push	r10
     4ba:	bf 92       	push	r11
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	2f 97       	sbiw	r28, 0x0f	; 15
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	fc 01       	movw	r30, r24
     4de:	8b 01       	movw	r16, r22
	uint8_t i =0 ;
	char counter = 0 ;
	char strSetPoint[5]= {'\0'} ;
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	9e 01       	movw	r18, r28
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	d9 01       	movw	r26, r18
     4ea:	98 2f       	mov	r25, r24
     4ec:	1d 92       	st	X+, r1
     4ee:	9a 95       	dec	r25
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <receiveAngles+0x40>
	char strSetPoint2[5]={'\0'} ;
     4f2:	2b 5f       	subi	r18, 0xFB	; 251
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
     4f6:	d9 01       	movw	r26, r18
     4f8:	98 2f       	mov	r25, r24
     4fa:	1d 92       	st	X+, r1
     4fc:	9a 95       	dec	r25
     4fe:	e9 f7       	brne	.-6      	; 0x4fa <receiveAngles+0x4e>
	char strSetPoint3[5]={'\0'} ;
     500:	2b 5f       	subi	r18, 0xFB	; 251
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	d9 01       	movw	r26, r18
     506:	1d 92       	st	X+, r1
     508:	8a 95       	dec	r24
     50a:	e9 f7       	brne	.-6      	; 0x506 <receiveAngles+0x5a>
	float receivedAngles[3]={0} ;
		
	while (*str !=0x00)
     50c:	90 81       	ld	r25, Z
     50e:	99 23       	and	r25, r25
     510:	49 f1       	breq	.+82     	; 0x564 <receiveAngles+0xb8>
     512:	31 96       	adiw	r30, 0x01	; 1
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (*str != ',')
     518:	9c 32       	cpi	r25, 0x2C	; 44
     51a:	f9 f0       	breq	.+62     	; 0x55a <receiveAngles+0xae>
		{
			switch(counter)
     51c:	21 30       	cpi	r18, 0x01	; 1
     51e:	61 f0       	breq	.+24     	; 0x538 <receiveAngles+0x8c>
     520:	18 f0       	brcs	.+6      	; 0x528 <receiveAngles+0x7c>
     522:	22 30       	cpi	r18, 0x02	; 2
     524:	89 f0       	breq	.+34     	; 0x548 <receiveAngles+0x9c>
     526:	17 c0       	rjmp	.+46     	; 0x556 <receiveAngles+0xaa>
			{
				case 0:
				strSetPoint[i]=*str;
     528:	a1 e0       	ldi	r26, 0x01	; 1
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ac 0f       	add	r26, r28
     52e:	bd 1f       	adc	r27, r29
     530:	a8 0f       	add	r26, r24
     532:	b1 1d       	adc	r27, r1
     534:	9c 93       	st	X, r25
				break ;
     536:	0f c0       	rjmp	.+30     	; 0x556 <receiveAngles+0xaa>
				case 1:
				strSetPoint2[i]=*str;
     538:	a6 e0       	ldi	r26, 0x06	; 6
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	ac 0f       	add	r26, r28
     53e:	bd 1f       	adc	r27, r29
     540:	a8 0f       	add	r26, r24
     542:	b1 1d       	adc	r27, r1
     544:	9c 93       	st	X, r25
				break ;
     546:	07 c0       	rjmp	.+14     	; 0x556 <receiveAngles+0xaa>
				case 2:
				strSetPoint3[i]=*str;
     548:	ab e0       	ldi	r26, 0x0B	; 11
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	ac 0f       	add	r26, r28
     54e:	bd 1f       	adc	r27, r29
     550:	a8 0f       	add	r26, r24
     552:	b1 1d       	adc	r27, r1
     554:	9c 93       	st	X, r25
				break ;
			}
			i++;
     556:	8f 5f       	subi	r24, 0xFF	; 255
     558:	02 c0       	rjmp	.+4      	; 0x55e <receiveAngles+0xb2>
		}
		else
		{
			counter++;
     55a:	2f 5f       	subi	r18, 0xFF	; 255
			i=0 ;
     55c:	80 e0       	ldi	r24, 0x00	; 0
	char strSetPoint[5]= {'\0'} ;
	char strSetPoint2[5]={'\0'} ;
	char strSetPoint3[5]={'\0'} ;
	float receivedAngles[3]={0} ;
		
	while (*str !=0x00)
     55e:	91 91       	ld	r25, Z+
     560:	91 11       	cpse	r25, r1
     562:	da cf       	rjmp	.-76     	; 0x518 <receiveAngles+0x6c>
/*
	USART_Transmit_string(strSetPoint,0);	USART_Transmit_string("  ,  ",0) ;
	USART_Transmit_string(strSetPoint,0);   USART_Transmit_string("  ,  ",0) ;
	USART_Transmit_string(strSetPoint,0);   USART_Transmit_string("\r\n",0) ;*/
	
	receivedAngles[0] = atoi(strSetPoint) ;
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	78 d6       	rcall	.+3312   	; 0x125a <atoi>
     56a:	bc 01       	movw	r22, r24
     56c:	99 0f       	add	r25, r25
     56e:	88 0b       	sbc	r24, r24
     570:	99 0b       	sbc	r25, r25
     572:	3a d5       	rcall	.+2676   	; 0xfe8 <__floatsisf>
     574:	4b 01       	movw	r8, r22
     576:	5c 01       	movw	r10, r24
	receivedAngles[1] = atoi(strSetPoint2) ;
     578:	ce 01       	movw	r24, r28
     57a:	06 96       	adiw	r24, 0x06	; 6
     57c:	6e d6       	rcall	.+3292   	; 0x125a <atoi>
     57e:	bc 01       	movw	r22, r24
     580:	99 0f       	add	r25, r25
     582:	88 0b       	sbc	r24, r24
     584:	99 0b       	sbc	r25, r25
     586:	30 d5       	rcall	.+2656   	; 0xfe8 <__floatsisf>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24
	receivedAngles[2] = atoi(strSetPoint3) ;
     58c:	ce 01       	movw	r24, r28
     58e:	0b 96       	adiw	r24, 0x0b	; 11
     590:	64 d6       	rcall	.+3272   	; 0x125a <atoi>
     592:	bc 01       	movw	r22, r24
     594:	99 0f       	add	r25, r25
     596:	88 0b       	sbc	r24, r24
     598:	99 0b       	sbc	r25, r25
     59a:	26 d5       	rcall	.+2636   	; 0xfe8 <__floatsisf>
     59c:	2b 01       	movw	r4, r22
     59e:	3c 01       	movw	r6, r24
     5a0:	20 e0       	ldi	r18, 0x00	; 0
	
	receivedSetPoints[0] = constrain(receivedAngles[0],0,90);
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	a9 01       	movw	r20, r18
     5a6:	c5 01       	movw	r24, r10
     5a8:	b4 01       	movw	r22, r8
     5aa:	7f d4       	rcall	.+2302   	; 0xeaa <__cmpsf2>
     5ac:	88 23       	and	r24, r24
     5ae:	54 f0       	brlt	.+20     	; 0x5c4 <receiveAngles+0x118>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	44 eb       	ldi	r20, 0xB4	; 180
     5b6:	52 e4       	ldi	r21, 0x42	; 66
     5b8:	c5 01       	movw	r24, r10
     5ba:	b4 01       	movw	r22, r8
     5bc:	c5 d5       	rcall	.+2954   	; 0x1148 <__gesf2>
     5be:	18 16       	cp	r1, r24
     5c0:	2c f0       	brlt	.+10     	; 0x5cc <receiveAngles+0x120>
     5c2:	0c c0       	rjmp	.+24     	; 0x5dc <receiveAngles+0x130>
     5c4:	81 2c       	mov	r8, r1
     5c6:	91 2c       	mov	r9, r1
     5c8:	54 01       	movw	r10, r8
     5ca:	08 c0       	rjmp	.+16     	; 0x5dc <receiveAngles+0x130>
     5cc:	0f 2e       	mov	r0, r31
     5ce:	81 2c       	mov	r8, r1
     5d0:	91 2c       	mov	r9, r1
     5d2:	f4 eb       	ldi	r31, 0xB4	; 180
     5d4:	af 2e       	mov	r10, r31
     5d6:	f2 e4       	ldi	r31, 0x42	; 66
     5d8:	bf 2e       	mov	r11, r31
     5da:	f0 2d       	mov	r31, r0
     5dc:	f8 01       	movw	r30, r16
     5de:	80 82       	st	Z, r8
     5e0:	91 82       	std	Z+1, r9	; 0x01
     5e2:	a2 82       	std	Z+2, r10	; 0x02
     5e4:	b3 82       	std	Z+3, r11	; 0x03
     5e6:	20 e0       	ldi	r18, 0x00	; 0
	receivedSetPoints[1] = constrain(receivedAngles[1],0,90);
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	a9 01       	movw	r20, r18
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	5c d4       	rcall	.+2232   	; 0xeaa <__cmpsf2>
     5f2:	88 23       	and	r24, r24
     5f4:	54 f0       	brlt	.+20     	; 0x60a <receiveAngles+0x15e>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	44 eb       	ldi	r20, 0xB4	; 180
     5fc:	52 e4       	ldi	r21, 0x42	; 66
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	a2 d5       	rcall	.+2884   	; 0x1148 <__gesf2>
     604:	18 16       	cp	r1, r24
     606:	2c f0       	brlt	.+10     	; 0x612 <receiveAngles+0x166>
     608:	0c c0       	rjmp	.+24     	; 0x622 <receiveAngles+0x176>
     60a:	c1 2c       	mov	r12, r1
     60c:	d1 2c       	mov	r13, r1
     60e:	76 01       	movw	r14, r12
     610:	08 c0       	rjmp	.+16     	; 0x622 <receiveAngles+0x176>
     612:	0f 2e       	mov	r0, r31
     614:	c1 2c       	mov	r12, r1
     616:	d1 2c       	mov	r13, r1
     618:	f4 eb       	ldi	r31, 0xB4	; 180
     61a:	ef 2e       	mov	r14, r31
     61c:	f2 e4       	ldi	r31, 0x42	; 66
     61e:	ff 2e       	mov	r15, r31
     620:	f0 2d       	mov	r31, r0
     622:	d8 01       	movw	r26, r16
     624:	14 96       	adiw	r26, 0x04	; 4
     626:	cd 92       	st	X+, r12
     628:	dd 92       	st	X+, r13
     62a:	ed 92       	st	X+, r14
     62c:	fc 92       	st	X, r15
     62e:	17 97       	sbiw	r26, 0x07	; 7
     630:	20 e0       	ldi	r18, 0x00	; 0
	receivedSetPoints[2] = constrain(receivedAngles[2],0,90);
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	a9 01       	movw	r20, r18
     636:	c3 01       	movw	r24, r6
     638:	b2 01       	movw	r22, r4
     63a:	37 d4       	rcall	.+2158   	; 0xeaa <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	54 f0       	brlt	.+20     	; 0x654 <receiveAngles+0x1a8>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	44 eb       	ldi	r20, 0xB4	; 180
     646:	52 e4       	ldi	r21, 0x42	; 66
     648:	c3 01       	movw	r24, r6
     64a:	b2 01       	movw	r22, r4
     64c:	7d d5       	rcall	.+2810   	; 0x1148 <__gesf2>
     64e:	18 16       	cp	r1, r24
     650:	6c f4       	brge	.+26     	; 0x66c <receiveAngles+0x1c0>
     652:	04 c0       	rjmp	.+8      	; 0x65c <receiveAngles+0x1b0>
     654:	41 2c       	mov	r4, r1
     656:	51 2c       	mov	r5, r1
     658:	32 01       	movw	r6, r4
     65a:	08 c0       	rjmp	.+16     	; 0x66c <receiveAngles+0x1c0>
     65c:	0f 2e       	mov	r0, r31
     65e:	41 2c       	mov	r4, r1
     660:	51 2c       	mov	r5, r1
     662:	f4 eb       	ldi	r31, 0xB4	; 180
     664:	6f 2e       	mov	r6, r31
     666:	f2 e4       	ldi	r31, 0x42	; 66
     668:	7f 2e       	mov	r7, r31
     66a:	f0 2d       	mov	r31, r0
     66c:	f8 01       	movw	r30, r16
     66e:	40 86       	std	Z+8, r4	; 0x08
     670:	51 86       	std	Z+9, r5	; 0x09
     672:	62 86       	std	Z+10, r6	; 0x0a
     674:	73 86       	std	Z+11, r7	; 0x0b
     676:	2f 96       	adiw	r28, 0x0f	; 15
     678:	0f b6       	in	r0, 0x3f	; 63
}
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	df 90       	pop	r13
     690:	cf 90       	pop	r12
     692:	bf 90       	pop	r11
     694:	af 90       	pop	r10
     696:	9f 90       	pop	r9
     698:	8f 90       	pop	r8
     69a:	7f 90       	pop	r7
     69c:	6f 90       	pop	r6
     69e:	5f 90       	pop	r5
     6a0:	4f 90       	pop	r4
     6a2:	08 95       	ret

000006a4 <cleanArr>:
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z

void cleanArr(char* StringPtr)
{
	while(*StringPtr != 0x00)
     6a8:	88 23       	and	r24, r24
     6aa:	21 f0       	breq	.+8      	; 0x6b4 <cleanArr+0x10>
	{
		*StringPtr=0x00 ;
     6ac:	11 92       	st	Z+, r1
	receivedSetPoints[2] = constrain(receivedAngles[2],0,90);
}

void cleanArr(char* StringPtr)
{
	while(*StringPtr != 0x00)
     6ae:	80 81       	ld	r24, Z
     6b0:	81 11       	cpse	r24, r1
     6b2:	fc cf       	rjmp	.-8      	; 0x6ac <cleanArr+0x8>
     6b4:	08 95       	ret

000006b6 <__vector_18>:
		StringPtr++;
	}
}

ISR(USART0_RX_vect)
{
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	0b b6       	in	r0, 0x3b	; 59
     6c2:	0f 92       	push	r0
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	cf 93       	push	r28
     6da:	ef 93       	push	r30
     6dc:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     6de:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6e0:	f8 94       	cli
	{
		UarTemp=UDR0 ;
     6e2:	9c b1       	in	r25, 0x0c	; 12
     6e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <UarTemp>
		static uint8_t i=0;
		if(UarTemp == 10)
     6e8:	9a 30       	cpi	r25, 0x0A	; 10
     6ea:	59 f4       	brne	.+22     	; 0x702 <__vector_18+0x4c>
		{
			
			receiveAngles(buffer,setPoint);
     6ec:	6c e0       	ldi	r22, 0x0C	; 12
     6ee:	71 e0       	ldi	r23, 0x01	; 1
     6f0:	8a ec       	ldi	r24, 0xCA	; 202
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	db de       	rcall	.-586    	; 0x4ac <receiveAngles>
			i=0 ;
     6f6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			cleanArr(buffer);
     6fa:	8a ec       	ldi	r24, 0xCA	; 202
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	d2 df       	rcall	.-92     	; 0x6a4 <cleanArr>
     700:	0a c0       	rjmp	.+20     	; 0x716 <__vector_18+0x60>
		}
		else
		{
			buffer[i]=UarTemp ;
     702:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     706:	e8 2f       	mov	r30, r24
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	e6 53       	subi	r30, 0x36	; 54
     70c:	fe 4f       	sbci	r31, 0xFE	; 254
     70e:	90 83       	st	Z, r25
			i++ ;
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     716:	cf bf       	out	0x3f, r28	; 63
		}
	}
}
     718:	ff 91       	pop	r31
     71a:	ef 91       	pop	r30
     71c:	cf 91       	pop	r28
     71e:	bf 91       	pop	r27
     720:	af 91       	pop	r26
     722:	9f 91       	pop	r25
     724:	8f 91       	pop	r24
     726:	7f 91       	pop	r23
     728:	6f 91       	pop	r22
     72a:	5f 91       	pop	r21
     72c:	4f 91       	pop	r20
     72e:	3f 91       	pop	r19
     730:	2f 91       	pop	r18
     732:	0f 90       	pop	r0
     734:	0b be       	out	0x3b, r0	; 59
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_21>:



ISR(ADC_vect)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	0b b6       	in	r0, 0x3b	; 59
     74c:	0f 92       	push	r0
     74e:	2f 92       	push	r2
     750:	3f 92       	push	r3
     752:	6f 92       	push	r6
     754:	7f 92       	push	r7
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <__vector_21+0x48>
     788:	00 d0       	rcall	.+0      	; 0x78a <__vector_21+0x4a>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	uint8_t LMB = ADCL;
     78e:	84 b1       	in	r24, 0x04	; 4
	uint16_t ADCvalue = ADCH <<8 | LMB;
     790:	25 b1       	in	r18, 0x05	; 5
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	92 2b       	or	r25, r18

	switch(ADMUX)
     796:	27 b1       	in	r18, 0x07	; 7
     798:	21 34       	cpi	r18, 0x41	; 65
     79a:	61 f0       	breq	.+24     	; 0x7b4 <__vector_21+0x74>
     79c:	18 f4       	brcc	.+6      	; 0x7a4 <__vector_21+0x64>
     79e:	20 34       	cpi	r18, 0x40	; 64
     7a0:	31 f0       	breq	.+12     	; 0x7ae <__vector_21+0x6e>
     7a2:	55 c0       	rjmp	.+170    	; 0x84e <__vector_21+0x10e>
     7a4:	22 34       	cpi	r18, 0x42	; 66
     7a6:	01 f1       	breq	.+64     	; 0x7e8 <__vector_21+0xa8>
     7a8:	23 34       	cpi	r18, 0x43	; 67
     7aa:	c1 f1       	breq	.+112    	; 0x81c <__vector_21+0xdc>
     7ac:	50 c0       	rjmp	.+160    	; 0x84e <__vector_21+0x10e>
	{	
		case 0b01000000:
		ADMUX = 0b01000001;
     7ae:	81 e4       	ldi	r24, 0x41	; 65
     7b0:	87 b9       	out	0x07, r24	; 7
		break;
     7b2:	4d c0       	rjmp	.+154    	; 0x84e <__vector_21+0x10e>
			
		case 0b01000001:
		ADC_accu[0] +=ADCvalue ;
     7b4:	e0 e3       	ldi	r30, 0x30	; 48
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	40 81       	ld	r20, Z
     7ba:	51 81       	ldd	r21, Z+1	; 0x01
     7bc:	62 81       	ldd	r22, Z+2	; 0x02
     7be:	73 81       	ldd	r23, Z+3	; 0x03
     7c0:	8a 01       	movw	r16, r20
     7c2:	9b 01       	movw	r18, r22
     7c4:	08 0f       	add	r16, r24
     7c6:	19 1f       	adc	r17, r25
     7c8:	21 1d       	adc	r18, r1
     7ca:	31 1d       	adc	r19, r1
     7cc:	00 83       	st	Z, r16
     7ce:	11 83       	std	Z+1, r17	; 0x01
     7d0:	22 83       	std	Z+2, r18	; 0x02
     7d2:	33 83       	std	Z+3, r19	; 0x03
		counter[0]++ ;
     7d4:	e8 e1       	ldi	r30, 0x18	; 24
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	80 81       	ld	r24, Z
     7da:	91 81       	ldd	r25, Z+1	; 0x01
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	91 83       	std	Z+1, r25	; 0x01
     7e0:	80 83       	st	Z, r24
		//USART_Transmit_int(ADCvalue,0)    ; USART_Transmit_string("   ,  ",0) ;
		ADMUX = 0b01000010;
     7e2:	82 e4       	ldi	r24, 0x42	; 66
     7e4:	87 b9       	out	0x07, r24	; 7
		break;
     7e6:	33 c0       	rjmp	.+102    	; 0x84e <__vector_21+0x10e>
		
		case 0b01000010:
		ADC_accu[1] +=ADCvalue ;
     7e8:	e0 e3       	ldi	r30, 0x30	; 48
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	44 81       	ldd	r20, Z+4	; 0x04
     7ee:	55 81       	ldd	r21, Z+5	; 0x05
     7f0:	66 81       	ldd	r22, Z+6	; 0x06
     7f2:	77 81       	ldd	r23, Z+7	; 0x07
     7f4:	8a 01       	movw	r16, r20
     7f6:	9b 01       	movw	r18, r22
     7f8:	08 0f       	add	r16, r24
     7fa:	19 1f       	adc	r17, r25
     7fc:	21 1d       	adc	r18, r1
     7fe:	31 1d       	adc	r19, r1
     800:	04 83       	std	Z+4, r16	; 0x04
     802:	15 83       	std	Z+5, r17	; 0x05
     804:	26 83       	std	Z+6, r18	; 0x06
     806:	37 83       	std	Z+7, r19	; 0x07
		counter[1]++ ;
     808:	e8 e1       	ldi	r30, 0x18	; 24
     80a:	f1 e0       	ldi	r31, 0x01	; 1
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	93 81       	ldd	r25, Z+3	; 0x03
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	93 83       	std	Z+3, r25	; 0x03
     814:	82 83       	std	Z+2, r24	; 0x02
		//USART_Transmit_int(ADCvalue,0)    ; USART_Transmit_string("   ,  ",0) ;
		ADMUX = 0b01000011;
     816:	83 e4       	ldi	r24, 0x43	; 67
     818:	87 b9       	out	0x07, r24	; 7
		break;
     81a:	19 c0       	rjmp	.+50     	; 0x84e <__vector_21+0x10e>
		
		case 0b01000011:
		ADC_accu[2] +=ADCvalue ;
     81c:	e0 e3       	ldi	r30, 0x30	; 48
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	40 85       	ldd	r20, Z+8	; 0x08
     822:	51 85       	ldd	r21, Z+9	; 0x09
     824:	62 85       	ldd	r22, Z+10	; 0x0a
     826:	73 85       	ldd	r23, Z+11	; 0x0b
     828:	8a 01       	movw	r16, r20
     82a:	9b 01       	movw	r18, r22
     82c:	08 0f       	add	r16, r24
     82e:	19 1f       	adc	r17, r25
     830:	21 1d       	adc	r18, r1
     832:	31 1d       	adc	r19, r1
     834:	00 87       	std	Z+8, r16	; 0x08
     836:	11 87       	std	Z+9, r17	; 0x09
     838:	22 87       	std	Z+10, r18	; 0x0a
     83a:	33 87       	std	Z+11, r19	; 0x0b
		counter[2]++ ;
     83c:	e8 e1       	ldi	r30, 0x18	; 24
     83e:	f1 e0       	ldi	r31, 0x01	; 1
     840:	84 81       	ldd	r24, Z+4	; 0x04
     842:	95 81       	ldd	r25, Z+5	; 0x05
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	95 83       	std	Z+5, r25	; 0x05
     848:	84 83       	std	Z+4, r24	; 0x04
		//USART_Transmit_int(ADCvalue,0)    ; USART_Transmit_string("\r\n",0) ;
		ADMUX = 0b01000001;
     84a:	81 e4       	ldi	r24, 0x41	; 65
     84c:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	if (counter[0]>= 100)
     84e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <counter>
     852:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <counter+0x1>
     856:	24 36       	cpi	r18, 0x64	; 100
     858:	31 05       	cpc	r19, r1
     85a:	08 f4       	brcc	.+2      	; 0x85e <__vector_21+0x11e>
     85c:	38 c1       	rjmp	.+624    	; 0xace <__vector_21+0x38e>
	{
		ADC_accu[0] = (ADC_accu[0])/(counter[0]) ;
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	e0 e3       	ldi	r30, 0x30	; 48
     864:	f1 e0       	ldi	r31, 0x01	; 1
     866:	60 81       	ld	r22, Z
     868:	71 81       	ldd	r23, Z+1	; 0x01
     86a:	82 81       	ldd	r24, Z+2	; 0x02
     86c:	93 81       	ldd	r25, Z+3	; 0x03
     86e:	d3 d4       	rcall	.+2470   	; 0x1216 <__udivmodsi4>
     870:	69 01       	movw	r12, r18
     872:	7a 01       	movw	r14, r20
     874:	e0 e3       	ldi	r30, 0x30	; 48
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	20 83       	st	Z, r18
     87a:	31 83       	std	Z+1, r19	; 0x01
     87c:	42 83       	std	Z+2, r20	; 0x02
     87e:	53 83       	std	Z+3, r21	; 0x03



void LPfilter(float rawDATA, float *filteredARRAY, float LPFgain)
{
	filteredARRAY[0] = rawDATA*LPFgain + filteredARRAY[1]*(1-LPFgain);
     880:	0c e4       	ldi	r16, 0x4C	; 76
     882:	11 e0       	ldi	r17, 0x01	; 1
     884:	24 e3       	ldi	r18, 0x34	; 52
     886:	33 e3       	ldi	r19, 0x33	; 51
     888:	43 eb       	ldi	r20, 0xB3	; 179
     88a:	5e e3       	ldi	r21, 0x3E	; 62
     88c:	f8 01       	movw	r30, r16
     88e:	64 81       	ldd	r22, Z+4	; 0x04
     890:	75 81       	ldd	r23, Z+5	; 0x05
     892:	86 81       	ldd	r24, Z+6	; 0x06
     894:	97 81       	ldd	r25, Z+7	; 0x07
     896:	5c d4       	rcall	.+2232   	; 0x1150 <__mulsf3>
     898:	4b 01       	movw	r8, r22
     89a:	5c 01       	movw	r10, r24
     89c:	c7 01       	movw	r24, r14
     89e:	b6 01       	movw	r22, r12
     8a0:	a1 d3       	rcall	.+1858   	; 0xfe4 <__floatunsisf>
     8a2:	26 e6       	ldi	r18, 0x66	; 102
     8a4:	36 e6       	ldi	r19, 0x66	; 102
     8a6:	46 e2       	ldi	r20, 0x26	; 38
     8a8:	5f e3       	ldi	r21, 0x3F	; 63
     8aa:	52 d4       	rcall	.+2212   	; 0x1150 <__mulsf3>
     8ac:	9b 01       	movw	r18, r22
     8ae:	ac 01       	movw	r20, r24
     8b0:	c5 01       	movw	r24, r10
     8b2:	b4 01       	movw	r22, r8
     8b4:	96 d2       	rcall	.+1324   	; 0xde2 <__addsf3>
     8b6:	f8 01       	movw	r30, r16
     8b8:	60 83       	st	Z, r22
     8ba:	71 83       	std	Z+1, r23	; 0x01
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	93 83       	std	Z+3, r25	; 0x03
	filteredARRAY[1] = filteredARRAY[0];
     8c0:	64 83       	std	Z+4, r22	; 0x04
     8c2:	75 83       	std	Z+5, r23	; 0x05
     8c4:	86 83       	std	Z+6, r24	; 0x06
}

float calc_Angle(float ADC_value)
{
	float Angle = 0;
	Angle = 360 * ADC_value / 1024;
     8c6:	97 83       	std	Z+7, r25	; 0x07
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	44 eb       	ldi	r20, 0xB4	; 180
     8ce:	53 e4       	ldi	r21, 0x43	; 67
     8d0:	3f d4       	rcall	.+2174   	; 0x1150 <__mulsf3>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e8       	ldi	r20, 0x80	; 128
     8d8:	5a e3       	ldi	r21, 0x3A	; 58
     8da:	3a d4       	rcall	.+2164   	; 0x1150 <__mulsf3>
     8dc:	6b 01       	movw	r12, r22
     8de:	7c 01       	movw	r14, r24
	
	if (counter[0]>= 100)
	{
		ADC_accu[0] = (ADC_accu[0])/(counter[0]) ;
		LPfilter(ADC_accu[0],filter,0.65) ;
		Angle[0] = calc_Angle(filter[0]) ;
     8e0:	04 e2       	ldi	r16, 0x24	; 36
     8e2:	11 e0       	ldi	r17, 0x01	; 1
     8e4:	f8 01       	movw	r30, r16
     8e6:	60 83       	st	Z, r22
     8e8:	71 83       	std	Z+1, r23	; 0x01
     8ea:	82 83       	std	Z+2, r24	; 0x02
     8ec:	93 83       	std	Z+3, r25	; 0x03
		
		ADC_accu[1] = (ADC_accu[1])/(counter[1]) ;
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f8 e1       	ldi	r31, 0x18	; 24
     8f2:	2f 2e       	mov	r2, r31
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
     8f6:	3f 2e       	mov	r3, r31
     8f8:	f0 2d       	mov	r31, r0
     8fa:	f1 01       	movw	r30, r2
     8fc:	22 81       	ldd	r18, Z+2	; 0x02
     8fe:	33 81       	ldd	r19, Z+3	; 0x03
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ADC_accu+0x4>
     908:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ADC_accu+0x5>
     90c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <ADC_accu+0x6>
     910:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <ADC_accu+0x7>
     914:	80 d4       	rcall	.+2304   	; 0x1216 <__udivmodsi4>
     916:	49 01       	movw	r8, r18
     918:	5a 01       	movw	r10, r20
     91a:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <ADC_accu+0x4>
     91e:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <ADC_accu+0x5>
     922:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <ADC_accu+0x6>
     926:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <ADC_accu+0x7>



void LPfilter(float rawDATA, float *filteredARRAY, float LPFgain)
{
	filteredARRAY[0] = rawDATA*LPFgain + filteredARRAY[1]*(1-LPFgain);
     92a:	0f 2e       	mov	r0, r31
     92c:	f4 e4       	ldi	r31, 0x44	; 68
     92e:	6f 2e       	mov	r6, r31
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	7f 2e       	mov	r7, r31
     934:	f0 2d       	mov	r31, r0
     936:	24 e3       	ldi	r18, 0x34	; 52
     938:	33 e3       	ldi	r19, 0x33	; 51
     93a:	43 eb       	ldi	r20, 0xB3	; 179
     93c:	5e e3       	ldi	r21, 0x3E	; 62
     93e:	f3 01       	movw	r30, r6
     940:	64 81       	ldd	r22, Z+4	; 0x04
     942:	75 81       	ldd	r23, Z+5	; 0x05
     944:	86 81       	ldd	r24, Z+6	; 0x06
     946:	97 81       	ldd	r25, Z+7	; 0x07
     948:	03 d4       	rcall	.+2054   	; 0x1150 <__mulsf3>
     94a:	69 83       	std	Y+1, r22	; 0x01
     94c:	7a 83       	std	Y+2, r23	; 0x02
     94e:	8b 83       	std	Y+3, r24	; 0x03
     950:	9c 83       	std	Y+4, r25	; 0x04
     952:	c5 01       	movw	r24, r10
     954:	b4 01       	movw	r22, r8
     956:	46 d3       	rcall	.+1676   	; 0xfe4 <__floatunsisf>
     958:	26 e6       	ldi	r18, 0x66	; 102
     95a:	36 e6       	ldi	r19, 0x66	; 102
     95c:	46 e2       	ldi	r20, 0x26	; 38
     95e:	5f e3       	ldi	r21, 0x3F	; 63
     960:	f7 d3       	rcall	.+2030   	; 0x1150 <__mulsf3>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	69 81       	ldd	r22, Y+1	; 0x01
     968:	7a 81       	ldd	r23, Y+2	; 0x02
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	39 d2       	rcall	.+1138   	; 0xde2 <__addsf3>
     970:	f3 01       	movw	r30, r6
     972:	60 83       	st	Z, r22
     974:	71 83       	std	Z+1, r23	; 0x01
     976:	82 83       	std	Z+2, r24	; 0x02
     978:	93 83       	std	Z+3, r25	; 0x03
	filteredARRAY[1] = filteredARRAY[0];
     97a:	64 83       	std	Z+4, r22	; 0x04
     97c:	75 83       	std	Z+5, r23	; 0x05
     97e:	86 83       	std	Z+6, r24	; 0x06
		LPfilter(ADC_accu[0],filter,0.65) ;
		Angle[0] = calc_Angle(filter[0]) ;
		
		ADC_accu[1] = (ADC_accu[1])/(counter[1]) ;
		LPfilter(ADC_accu[1],filter2,0.65) ;
		Angle[1] = calc_Angle(filter2[0]) ;
     980:	97 83       	std	Z+7, r25	; 0x07
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	44 eb       	ldi	r20, 0xB4	; 180
     988:	53 e4       	ldi	r21, 0x43	; 67
     98a:	e2 d3       	rcall	.+1988   	; 0x1150 <__mulsf3>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5a e3       	ldi	r21, 0x3A	; 58
     994:	dd d3       	rcall	.+1978   	; 0x1150 <__mulsf3>
     996:	f8 01       	movw	r30, r16
     998:	64 83       	std	Z+4, r22	; 0x04
     99a:	75 83       	std	Z+5, r23	; 0x05
     99c:	86 83       	std	Z+6, r24	; 0x06
     99e:	97 83       	std	Z+7, r25	; 0x07
		
		ADC_accu[2] = (ADC_accu[2])/(counter[2]) ;
     9a0:	f1 01       	movw	r30, r2
     9a2:	24 81       	ldd	r18, Z+4	; 0x04
     9a4:	35 81       	ldd	r19, Z+5	; 0x05
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ADC_accu+0x8>
     9ae:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ADC_accu+0x9>
     9b2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ADC_accu+0xa>
     9b6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ADC_accu+0xb>
     9ba:	2d d4       	rcall	.+2138   	; 0x1216 <__udivmodsi4>
     9bc:	49 01       	movw	r8, r18
     9be:	5a 01       	movw	r10, r20
     9c0:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <ADC_accu+0x8>
     9c4:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <ADC_accu+0x9>
     9c8:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <ADC_accu+0xa>
     9cc:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <ADC_accu+0xb>
     9d0:	0f 2e       	mov	r0, r31



void LPfilter(float rawDATA, float *filteredARRAY, float LPFgain)
{
	filteredARRAY[0] = rawDATA*LPFgain + filteredARRAY[1]*(1-LPFgain);
     9d2:	fc e3       	ldi	r31, 0x3C	; 60
     9d4:	6f 2e       	mov	r6, r31
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	7f 2e       	mov	r7, r31
     9da:	f0 2d       	mov	r31, r0
     9dc:	24 e3       	ldi	r18, 0x34	; 52
     9de:	33 e3       	ldi	r19, 0x33	; 51
     9e0:	43 eb       	ldi	r20, 0xB3	; 179
     9e2:	5e e3       	ldi	r21, 0x3E	; 62
     9e4:	f3 01       	movw	r30, r6
     9e6:	64 81       	ldd	r22, Z+4	; 0x04
     9e8:	75 81       	ldd	r23, Z+5	; 0x05
     9ea:	86 81       	ldd	r24, Z+6	; 0x06
     9ec:	97 81       	ldd	r25, Z+7	; 0x07
     9ee:	b0 d3       	rcall	.+1888   	; 0x1150 <__mulsf3>
     9f0:	69 83       	std	Y+1, r22	; 0x01
     9f2:	7a 83       	std	Y+2, r23	; 0x02
     9f4:	8b 83       	std	Y+3, r24	; 0x03
     9f6:	9c 83       	std	Y+4, r25	; 0x04
     9f8:	c5 01       	movw	r24, r10
     9fa:	b4 01       	movw	r22, r8
     9fc:	f3 d2       	rcall	.+1510   	; 0xfe4 <__floatunsisf>
     9fe:	26 e6       	ldi	r18, 0x66	; 102
     a00:	36 e6       	ldi	r19, 0x66	; 102
     a02:	46 e2       	ldi	r20, 0x26	; 38
     a04:	5f e3       	ldi	r21, 0x3F	; 63
     a06:	a4 d3       	rcall	.+1864   	; 0x1150 <__mulsf3>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	69 81       	ldd	r22, Y+1	; 0x01
     a0e:	7a 81       	ldd	r23, Y+2	; 0x02
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	e6 d1       	rcall	.+972    	; 0xde2 <__addsf3>
     a16:	f3 01       	movw	r30, r6
     a18:	60 83       	st	Z, r22
     a1a:	71 83       	std	Z+1, r23	; 0x01
     a1c:	82 83       	std	Z+2, r24	; 0x02
	filteredARRAY[1] = filteredARRAY[0];
     a1e:	93 83       	std	Z+3, r25	; 0x03
     a20:	64 83       	std	Z+4, r22	; 0x04
     a22:	75 83       	std	Z+5, r23	; 0x05
		LPfilter(ADC_accu[1],filter2,0.65) ;
		Angle[1] = calc_Angle(filter2[0]) ;
		
		ADC_accu[2] = (ADC_accu[2])/(counter[2]) ;
		LPfilter(ADC_accu[2],filter3,0.65) ;
		Angle[2] = calc_Angle(filter3[0]) ;
     a24:	86 83       	std	Z+6, r24	; 0x06
     a26:	97 83       	std	Z+7, r25	; 0x07
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	44 eb       	ldi	r20, 0xB4	; 180
     a2e:	53 e4       	ldi	r21, 0x43	; 67
     a30:	8f d3       	rcall	.+1822   	; 0x1150 <__mulsf3>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5a e3       	ldi	r21, 0x3A	; 58
     a3a:	8a d3       	rcall	.+1812   	; 0x1150 <__mulsf3>
     a3c:	f8 01       	movw	r30, r16
     a3e:	60 87       	std	Z+8, r22	; 0x08
		
		/*USART_Transmit_int(filter[0],0)   ; USART_Transmit_string(" , ",0) ;
		USART_Transmit_int(filter2[0],0)  ; USART_Transmit_string(" , ",0) ;
		USART_Transmit_int(filter3[0],0)  ; USART_Transmit_string("----",0) ;*/
		
		USART_Transmit_int(Angle[0],0)    ; USART_Transmit_string(" , ",0) ;
     a40:	71 87       	std	Z+9, r23	; 0x09
     a42:	82 87       	std	Z+10, r24	; 0x0a
     a44:	93 87       	std	Z+11, r25	; 0x0b
     a46:	c7 01       	movw	r24, r14
     a48:	b6 01       	movw	r22, r12
     a4a:	9b d2       	rcall	.+1334   	; 0xf82 <__fixsfsi>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	e3 db       	rcall	.-2106   	; 0x21a <USART_Transmit_int>
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
		USART_Transmit_int(Angle[1],0)    ; USART_Transmit_string(" , ",0) ;
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0d dc       	rcall	.-2022   	; 0x276 <USART_Transmit_string>
     a5c:	f8 01       	movw	r30, r16
     a5e:	64 81       	ldd	r22, Z+4	; 0x04
     a60:	75 81       	ldd	r23, Z+5	; 0x05
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	97 81       	ldd	r25, Z+7	; 0x07
     a66:	8d d2       	rcall	.+1306   	; 0xf82 <__fixsfsi>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	d5 db       	rcall	.-2134   	; 0x21a <USART_Transmit_int>
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	ff db       	rcall	.-2050   	; 0x276 <USART_Transmit_string>
		//USART_Transmit_int(Angle[2],0)    ; USART_Transmit_string("----",0) ;
		USART_Transmit_int(Angle[2],0)    ; USART_Transmit_string(" \r\n ",0) ;
     a78:	f8 01       	movw	r30, r16
     a7a:	60 85       	ldd	r22, Z+8	; 0x08
     a7c:	71 85       	ldd	r23, Z+9	; 0x09
     a7e:	82 85       	ldd	r24, Z+10	; 0x0a
     a80:	93 85       	ldd	r25, Z+11	; 0x0b
     a82:	7f d2       	rcall	.+1278   	; 0xf82 <__fixsfsi>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	c7 db       	rcall	.-2162   	; 0x21a <USART_Transmit_int>
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	f1 db       	rcall	.-2078   	; 0x276 <USART_Transmit_string>
     a94:	e0 e3       	ldi	r30, 0x30	; 48
     a96:	f1 e0       	ldi	r31, 0x01	; 1
		USART_Transmit_int(PWMDuty[1],0)  ; USART_Transmit_string(" , ",0) ;
		USART_Transmit_int(PWMDuty[2],0)  ; USART_Transmit_string("\r\n",0) ;*/
		
		for (uint8_t i=0 ;i<3;i++)
		{
			ADC_accu[i] = 0;
     a98:	10 82       	st	Z, r1
     a9a:	11 82       	std	Z+1, r1	; 0x01
     a9c:	12 82       	std	Z+2, r1	; 0x02
     a9e:	13 82       	std	Z+3, r1	; 0x03
     aa0:	f1 01       	movw	r30, r2
     aa2:	11 82       	std	Z+1, r1	; 0x01
			counter[i] = 0 ;
     aa4:	10 82       	st	Z, r1
     aa6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ADC_accu+0x4>
		USART_Transmit_int(PWMDuty[1],0)  ; USART_Transmit_string(" , ",0) ;
		USART_Transmit_int(PWMDuty[2],0)  ; USART_Transmit_string("\r\n",0) ;*/
		
		for (uint8_t i=0 ;i<3;i++)
		{
			ADC_accu[i] = 0;
     aaa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ADC_accu+0x5>
     aae:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <ADC_accu+0x6>
     ab2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ADC_accu+0x7>
     ab6:	13 82       	std	Z+3, r1	; 0x03
     ab8:	12 82       	std	Z+2, r1	; 0x02
			counter[i] = 0 ;
     aba:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ADC_accu+0x8>
		USART_Transmit_int(PWMDuty[1],0)  ; USART_Transmit_string(" , ",0) ;
		USART_Transmit_int(PWMDuty[2],0)  ; USART_Transmit_string("\r\n",0) ;*/
		
		for (uint8_t i=0 ;i<3;i++)
		{
			ADC_accu[i] = 0;
     abe:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <ADC_accu+0x9>
     ac2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <ADC_accu+0xa>
     ac6:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <ADC_accu+0xb>
     aca:	15 82       	std	Z+5, r1	; 0x05
     acc:	14 82       	std	Z+4, r1	; 0x04
			counter[i] = 0 ;
     ace:	05 db       	rcall	.-2550   	; 0xda <ADC_startConversion>
     ad0:	0f 90       	pop	r0
		}
		
	}
	ADC_startConversion();
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	bf 91       	pop	r27
     ae2:	af 91       	pop	r26
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	7f 91       	pop	r23
     aea:	6f 91       	pop	r22
     aec:	5f 91       	pop	r21
     aee:	4f 91       	pop	r20
     af0:	3f 91       	pop	r19
     af2:	2f 91       	pop	r18
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	3f 90       	pop	r3
     b0e:	2f 90       	pop	r2
     b10:	0f 90       	pop	r0
     b12:	0b be       	out	0x3b, r0	; 59
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <pid_init>:
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
 * @param kp
 * @param ki
 * @param kd
 */
void pid_init(PID_t *pid, float kp, float ki, float kd)
{
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	fc 01       	movw	r30, r24
	pid->kp = kp;
     b2c:	40 83       	st	Z, r20
     b2e:	51 83       	std	Z+1, r21	; 0x01
     b30:	62 83       	std	Z+2, r22	; 0x02
     b32:	73 83       	std	Z+3, r23	; 0x03
	pid->ki = ki;
     b34:	04 83       	std	Z+4, r16	; 0x04
     b36:	15 83       	std	Z+5, r17	; 0x05
     b38:	26 83       	std	Z+6, r18	; 0x06
     b3a:	37 83       	std	Z+7, r19	; 0x07
	pid->kd = kd;
     b3c:	c0 86       	std	Z+8, r12	; 0x08
     b3e:	d1 86       	std	Z+9, r13	; 0x09
     b40:	e2 86       	std	Z+10, r14	; 0x0a
     b42:	f3 86       	std	Z+11, r15	; 0x0b

	pid->sp = 0;
     b44:	14 86       	std	Z+12, r1	; 0x0c
     b46:	15 86       	std	Z+13, r1	; 0x0d
     b48:	16 86       	std	Z+14, r1	; 0x0e
     b4a:	17 86       	std	Z+15, r1	; 0x0f
	pid->error_previous = 0;
     b4c:	14 8a       	std	Z+20, r1	; 0x14
     b4e:	15 8a       	std	Z+21, r1	; 0x15
     b50:	16 8a       	std	Z+22, r1	; 0x16
     b52:	17 8a       	std	Z+23, r1	; 0x17
	pid->integral = 0;
     b54:	10 8a       	std	Z+16, r1	; 0x10
     b56:	11 8a       	std	Z+17, r1	; 0x11
     b58:	12 8a       	std	Z+18, r1	; 0x12
     b5a:	13 8a       	std	Z+19, r1	; 0x13

    pid->features = 0;
     b5c:	11 8e       	std	Z+25, r1	; 0x19
     b5e:	10 8e       	std	Z+24, r1	; 0x18

}
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	08 95       	ret

00000b6e <pid_set>:

void pid_set(PID_t *pid, float sp)
{
     b6e:	fc 01       	movw	r30, r24
	pid->sp = sp;
     b70:	44 87       	std	Z+12, r20	; 0x0c
     b72:	55 87       	std	Z+13, r21	; 0x0d
     b74:	66 87       	std	Z+14, r22	; 0x0e
     b76:	77 87       	std	Z+15, r23	; 0x0f
	pid->error_previous = 0;
     b78:	14 8a       	std	Z+20, r1	; 0x14
     b7a:	15 8a       	std	Z+21, r1	; 0x15
     b7c:	16 8a       	std	Z+22, r1	; 0x16
     b7e:	17 8a       	std	Z+23, r1	; 0x17
	pid->integral = 0;
     b80:	10 8a       	std	Z+16, r1	; 0x10
     b82:	11 8a       	std	Z+17, r1	; 0x11
     b84:	12 8a       	std	Z+18, r1	; 0x12
     b86:	13 8a       	std	Z+19, r1	; 0x13
     b88:	08 95       	ret

00000b8a <pid_calculate>:
 * @param val
 * @param dt
 * @return
 */
float pid_calculate(PID_t *pid, float val, float dt)
{
     b8a:	2f 92       	push	r2
     b8c:	3f 92       	push	r3
     b8e:	4f 92       	push	r4
     b90:	5f 92       	push	r5
     b92:	6f 92       	push	r6
     b94:	7f 92       	push	r7
     b96:	8f 92       	push	r8
     b98:	9f 92       	push	r9
     b9a:	af 92       	push	r10
     b9c:	bf 92       	push	r11
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <pid_calculate+0x26>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <pid_calculate+0x28>
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <pid_calculate+0x2a>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	9e 83       	std	Y+6, r25	; 0x06
     bba:	8d 83       	std	Y+5, r24	; 0x05
     bbc:	49 83       	std	Y+1, r20	; 0x01
     bbe:	5a 83       	std	Y+2, r21	; 0x02
     bc0:	6b 83       	std	Y+3, r22	; 0x03
     bc2:	7c 83       	std	Y+4, r23	; 0x04
     bc4:	48 01       	movw	r8, r16
     bc6:	59 01       	movw	r10, r18
	float i,d, error, total;

	error = pid->sp - val;
     bc8:	9a 01       	movw	r18, r20
     bca:	ab 01       	movw	r20, r22
     bcc:	fc 01       	movw	r30, r24
     bce:	64 85       	ldd	r22, Z+12	; 0x0c
     bd0:	75 85       	ldd	r23, Z+13	; 0x0d
     bd2:	86 85       	ldd	r24, Z+14	; 0x0e
     bd4:	97 85       	ldd	r25, Z+15	; 0x0f
     bd6:	04 d1       	rcall	.+520    	; 0xde0 <__subsf3>
     bd8:	6b 01       	movw	r12, r22
     bda:	7c 01       	movw	r14, r24
	i = pid->integral + (error * dt);
     bdc:	a5 01       	movw	r20, r10
     bde:	94 01       	movw	r18, r8
     be0:	b7 d2       	rcall	.+1390   	; 0x1150 <__mulsf3>
     be2:	ed 81       	ldd	r30, Y+5	; 0x05
     be4:	fe 81       	ldd	r31, Y+6	; 0x06
     be6:	20 89       	ldd	r18, Z+16	; 0x10
     be8:	31 89       	ldd	r19, Z+17	; 0x11
     bea:	42 89       	ldd	r20, Z+18	; 0x12
     bec:	53 89       	ldd	r21, Z+19	; 0x13
     bee:	f9 d0       	rcall	.+498    	; 0xde2 <__addsf3>
     bf0:	16 2f       	mov	r17, r22
     bf2:	07 2f       	mov	r16, r23
     bf4:	38 2e       	mov	r3, r24
     bf6:	29 2e       	mov	r2, r25
	d = (val - pid->error_previous) / dt; //error

    total = (error * pid->kp) + (i * pid->ki) + (d * pid->kd);
     bf8:	ed 81       	ldd	r30, Y+5	; 0x05
     bfa:	fe 81       	ldd	r31, Y+6	; 0x06
     bfc:	20 81       	ld	r18, Z
     bfe:	31 81       	ldd	r19, Z+1	; 0x01
     c00:	42 81       	ldd	r20, Z+2	; 0x02
     c02:	53 81       	ldd	r21, Z+3	; 0x03
     c04:	c7 01       	movw	r24, r14
     c06:	b6 01       	movw	r22, r12
     c08:	a3 d2       	rcall	.+1350   	; 0x1150 <__mulsf3>
     c0a:	2b 01       	movw	r4, r22
     c0c:	3c 01       	movw	r6, r24
     c0e:	ed 81       	ldd	r30, Y+5	; 0x05
     c10:	fe 81       	ldd	r31, Y+6	; 0x06
     c12:	24 81       	ldd	r18, Z+4	; 0x04
     c14:	35 81       	ldd	r19, Z+5	; 0x05
     c16:	46 81       	ldd	r20, Z+6	; 0x06
     c18:	57 81       	ldd	r21, Z+7	; 0x07
     c1a:	61 2f       	mov	r22, r17
     c1c:	70 2f       	mov	r23, r16
     c1e:	83 2d       	mov	r24, r3
     c20:	92 2d       	mov	r25, r2
     c22:	96 d2       	rcall	.+1324   	; 0x1150 <__mulsf3>
     c24:	9b 01       	movw	r18, r22
     c26:	ac 01       	movw	r20, r24
     c28:	c3 01       	movw	r24, r6
     c2a:	b2 01       	movw	r22, r4
     c2c:	da d0       	rcall	.+436    	; 0xde2 <__addsf3>
     c2e:	2b 01       	movw	r4, r22
     c30:	3c 01       	movw	r6, r24
     c32:	ed 81       	ldd	r30, Y+5	; 0x05
     c34:	fe 81       	ldd	r31, Y+6	; 0x06
     c36:	24 89       	ldd	r18, Z+20	; 0x14
     c38:	35 89       	ldd	r19, Z+21	; 0x15
     c3a:	46 89       	ldd	r20, Z+22	; 0x16
     c3c:	57 89       	ldd	r21, Z+23	; 0x17
     c3e:	69 81       	ldd	r22, Y+1	; 0x01
     c40:	7a 81       	ldd	r23, Y+2	; 0x02
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	cc d0       	rcall	.+408    	; 0xde0 <__subsf3>
     c48:	a5 01       	movw	r20, r10
     c4a:	94 01       	movw	r18, r8
     c4c:	32 d1       	rcall	.+612    	; 0xeb2 <__divsf3>
     c4e:	ed 81       	ldd	r30, Y+5	; 0x05
     c50:	fe 81       	ldd	r31, Y+6	; 0x06
     c52:	20 85       	ldd	r18, Z+8	; 0x08
     c54:	31 85       	ldd	r19, Z+9	; 0x09
     c56:	42 85       	ldd	r20, Z+10	; 0x0a
     c58:	53 85       	ldd	r21, Z+11	; 0x0b
     c5a:	7a d2       	rcall	.+1268   	; 0x1150 <__mulsf3>
     c5c:	9b 01       	movw	r18, r22
     c5e:	ac 01       	movw	r20, r24
     c60:	c3 01       	movw	r24, r6
     c62:	b2 01       	movw	r22, r4
     c64:	be d0       	rcall	.+380    	; 0xde2 <__addsf3>
     c66:	a6 2e       	mov	r10, r22
     c68:	97 2e       	mov	r9, r23
     c6a:	88 2e       	mov	r8, r24
     c6c:	99 83       	std	Y+1, r25	; 0x01

    if ( WINDUP_ON(pid) ) {
     c6e:	ed 81       	ldd	r30, Y+5	; 0x05
     c70:	fe 81       	ldd	r31, Y+6	; 0x06
     c72:	b0 8c       	ldd	r11, Z+24	; 0x18
     c74:	b0 fe       	sbrs	r11, 0
        if ( i < 0 )
     c76:	38 c0       	rjmp	.+112    	; 0xce8 <pid_calculate+0x15e>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	a9 01       	movw	r20, r18
     c7e:	61 2f       	mov	r22, r17
     c80:	70 2f       	mov	r23, r16
     c82:	83 2d       	mov	r24, r3
     c84:	92 2d       	mov	r25, r2
     c86:	11 d1       	rcall	.+546    	; 0xeaa <__cmpsf2>
     c88:	88 23       	and	r24, r24
     c8a:	a4 f4       	brge	.+40     	; 0xcb4 <pid_calculate+0x12a>
            i = ( i < -pid->intmax ? -pid->intmax : i );
     c8c:	ed 81       	ldd	r30, Y+5	; 0x05
     c8e:	fe 81       	ldd	r31, Y+6	; 0x06
     c90:	42 8c       	ldd	r4, Z+26	; 0x1a
     c92:	53 8c       	ldd	r5, Z+27	; 0x1b
     c94:	64 8c       	ldd	r6, Z+28	; 0x1c
     c96:	75 8c       	ldd	r7, Z+29	; 0x1d
     c98:	77 fa       	bst	r7, 7
     c9a:	70 94       	com	r7
     c9c:	77 f8       	bld	r7, 7
     c9e:	70 94       	com	r7
     ca0:	a3 01       	movw	r20, r6
     ca2:	92 01       	movw	r18, r4
     ca4:	61 2f       	mov	r22, r17
     ca6:	70 2f       	mov	r23, r16
     ca8:	83 2d       	mov	r24, r3
     caa:	92 2d       	mov	r25, r2
     cac:	fe d0       	rcall	.+508    	; 0xeaa <__cmpsf2>
     cae:	88 23       	and	r24, r24
     cb0:	bc f0       	brlt	.+46     	; 0xce0 <pid_calculate+0x156>
     cb2:	1a c0       	rjmp	.+52     	; 0xce8 <pid_calculate+0x15e>
        else
   		    i = ( i < pid->intmax ? i : pid->intmax );
     cb4:	ed 81       	ldd	r30, Y+5	; 0x05
     cb6:	fe 81       	ldd	r31, Y+6	; 0x06
     cb8:	72 8c       	ldd	r7, Z+26	; 0x1a
     cba:	63 8c       	ldd	r6, Z+27	; 0x1b
     cbc:	54 8c       	ldd	r5, Z+28	; 0x1c
     cbe:	45 8c       	ldd	r4, Z+29	; 0x1d
     cc0:	27 2d       	mov	r18, r7
     cc2:	36 2d       	mov	r19, r6
     cc4:	45 2d       	mov	r20, r5
     cc6:	54 2d       	mov	r21, r4
     cc8:	61 2f       	mov	r22, r17
     cca:	70 2f       	mov	r23, r16
     ccc:	83 2d       	mov	r24, r3
     cce:	92 2d       	mov	r25, r2
     cd0:	ec d0       	rcall	.+472    	; 0xeaa <__cmpsf2>
     cd2:	88 23       	and	r24, r24
     cd4:	4c f0       	brlt	.+18     	; 0xce8 <pid_calculate+0x15e>
     cd6:	17 2d       	mov	r17, r7
     cd8:	06 2d       	mov	r16, r6
     cda:	35 2c       	mov	r3, r5
     cdc:	24 2c       	mov	r2, r4
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <pid_calculate+0x15e>

    total = (error * pid->kp) + (i * pid->ki) + (d * pid->kd);

    if ( WINDUP_ON(pid) ) {
        if ( i < 0 )
            i = ( i < -pid->intmax ? -pid->intmax : i );
     ce0:	14 2d       	mov	r17, r4
     ce2:	05 2d       	mov	r16, r5
     ce4:	36 2c       	mov	r3, r6
     ce6:	27 2c       	mov	r2, r7
        else
   		    i = ( i < pid->intmax ? i : pid->intmax );
    }
    pid->integral = i;
     ce8:	81 2f       	mov	r24, r17
     cea:	90 2f       	mov	r25, r16
     cec:	a3 2d       	mov	r26, r3
     cee:	b2 2d       	mov	r27, r2
     cf0:	ed 81       	ldd	r30, Y+5	; 0x05
     cf2:	fe 81       	ldd	r31, Y+6	; 0x06
     cf4:	80 8b       	std	Z+16, r24	; 0x10
     cf6:	91 8b       	std	Z+17, r25	; 0x11
     cf8:	a2 8b       	std	Z+18, r26	; 0x12
     cfa:	b3 8b       	std	Z+19, r27	; 0x13

    if ( SAT_MIN_ON(pid) && (total < pid->sat_min) )
     cfc:	b2 fe       	sbrs	r11, 2
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <pid_calculate+0x194>
     d00:	12 a1       	ldd	r17, Z+34	; 0x22
     d02:	03 a1       	ldd	r16, Z+35	; 0x23
     d04:	74 a0       	ldd	r7, Z+36	; 0x24
     d06:	65 a0       	ldd	r6, Z+37	; 0x25
     d08:	21 2f       	mov	r18, r17
     d0a:	30 2f       	mov	r19, r16
     d0c:	47 2d       	mov	r20, r7
     d0e:	56 2d       	mov	r21, r6
     d10:	6a 2d       	mov	r22, r10
     d12:	79 2d       	mov	r23, r9
     d14:	88 2d       	mov	r24, r8
     d16:	99 81       	ldd	r25, Y+1	; 0x01
     d18:	c8 d0       	rcall	.+400    	; 0xeaa <__cmpsf2>
     d1a:	88 23       	and	r24, r24
     d1c:	ec f0       	brlt	.+58     	; 0xd58 <pid_calculate+0x1ce>
        return pid->sat_min;
    if ( SAT_MAX_ON(pid) && (total > pid->sat_max) )
     d1e:	b3 fe       	sbrs	r11, 3
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <pid_calculate+0x1ba>
     d22:	ed 81       	ldd	r30, Y+5	; 0x05
     d24:	fe 81       	ldd	r31, Y+6	; 0x06
     d26:	16 8d       	ldd	r17, Z+30	; 0x1e
     d28:	07 8d       	ldd	r16, Z+31	; 0x1f
     d2a:	70 a0       	ldd	r7, Z+32	; 0x20
     d2c:	61 a0       	ldd	r6, Z+33	; 0x21
     d2e:	21 2f       	mov	r18, r17
     d30:	30 2f       	mov	r19, r16
     d32:	47 2d       	mov	r20, r7
     d34:	56 2d       	mov	r21, r6
     d36:	6a 2d       	mov	r22, r10
     d38:	79 2d       	mov	r23, r9
     d3a:	88 2d       	mov	r24, r8
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
     d3e:	04 d2       	rcall	.+1032   	; 0x1148 <__gesf2>
     d40:	18 16       	cp	r1, r24
     d42:	54 f0       	brlt	.+20     	; 0xd58 <pid_calculate+0x1ce>
        return pid->sat_max;

	pid->error_previous = error;
     d44:	ed 81       	ldd	r30, Y+5	; 0x05
     d46:	fe 81       	ldd	r31, Y+6	; 0x06
     d48:	c4 8a       	std	Z+20, r12	; 0x14
     d4a:	d5 8a       	std	Z+21, r13	; 0x15
     d4c:	e6 8a       	std	Z+22, r14	; 0x16
     d4e:	f7 8a       	std	Z+23, r15	; 0x17
	return total;
     d50:	1a 2d       	mov	r17, r10
     d52:	09 2d       	mov	r16, r9
     d54:	78 2c       	mov	r7, r8
     d56:	69 80       	ldd	r6, Y+1	; 0x01
}
     d58:	61 2f       	mov	r22, r17
     d5a:	70 2f       	mov	r23, r16
     d5c:	87 2d       	mov	r24, r7
     d5e:	96 2d       	mov	r25, r6
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	9f 90       	pop	r9
     d82:	8f 90       	pop	r8
     d84:	7f 90       	pop	r7
     d86:	6f 90       	pop	r6
     d88:	5f 90       	pop	r5
     d8a:	4f 90       	pop	r4
     d8c:	3f 90       	pop	r3
     d8e:	2f 90       	pop	r2
     d90:	08 95       	ret

00000d92 <init_loop_timer>:
//------TIMER for main loop timing--------------
//with prescale 8
//At 8MHz 0.01s = 10 000 unit
void init_loop_timer(void)
{
	TCCR1A=0X00;
     d92:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |=1<<CS11;
     d94:	8e b5       	in	r24, 0x2e	; 46
     d96:	82 60       	ori	r24, 0x02	; 2
     d98:	8e bd       	out	0x2e, r24	; 46
	TCCR1C =0x00;
     d9a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     d9e:	08 95       	ret

00000da0 <int_PWM_timers>:
void int_PWM_timers(void)
{
	/*TCCR2 |=1<<WGM21 | 1<<WGM20 | 1<<COM21 | 1<<CS20;
	TCCR0 |=1<<WGM01 | 1<<WGM00 | 1<<COM01 | 1<<CS00;
	OCR2 = 0; OCR0 = 0;*/
	TCCR3A |= (1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1)|(1<<WGM31);        //NON Inverted PWM
     da0:	eb e8       	ldi	r30, 0x8B	; 139
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8a 6a       	ori	r24, 0xAA	; 170
     da8:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM33)|(1<<WGM32)|(1<<CS30);
     daa:	ea e8       	ldi	r30, 0x8A	; 138
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	89 61       	ori	r24, 0x19	; 25
     db2:	80 83       	st	Z, r24
	ICR3 =250 ;
     db4:	8a ef       	ldi	r24, 0xFA	; 250
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     dbc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	DDRE|=(1<<PINE3)|(1<<PINE4)|(1<<PINE3);   //PWM Pins as Out
     dc0:	82 b1       	in	r24, 0x02	; 2
     dc2:	88 61       	ori	r24, 0x18	; 24
     dc4:	82 b9       	out	0x02, r24	; 2
	OCR3C = 0;
     dc6:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     dca:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	OCR3B = 0;
     dce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     dd2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR3A = 0;
     dd6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     dda:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     dde:	08 95       	ret

00000de0 <__subsf3>:
     de0:	50 58       	subi	r21, 0x80	; 128

00000de2 <__addsf3>:
     de2:	bb 27       	eor	r27, r27
     de4:	aa 27       	eor	r26, r26
     de6:	0e d0       	rcall	.+28     	; 0xe04 <__addsf3x>
     de8:	75 c1       	rjmp	.+746    	; 0x10d4 <__fp_round>
     dea:	66 d1       	rcall	.+716    	; 0x10b8 <__fp_pscA>
     dec:	30 f0       	brcs	.+12     	; 0xdfa <__addsf3+0x18>
     dee:	6b d1       	rcall	.+726    	; 0x10c6 <__fp_pscB>
     df0:	20 f0       	brcs	.+8      	; 0xdfa <__addsf3+0x18>
     df2:	31 f4       	brne	.+12     	; 0xe00 <__addsf3+0x1e>
     df4:	9f 3f       	cpi	r25, 0xFF	; 255
     df6:	11 f4       	brne	.+4      	; 0xdfc <__addsf3+0x1a>
     df8:	1e f4       	brtc	.+6      	; 0xe00 <__addsf3+0x1e>
     dfa:	5b c1       	rjmp	.+694    	; 0x10b2 <__fp_nan>
     dfc:	0e f4       	brtc	.+2      	; 0xe00 <__addsf3+0x1e>
     dfe:	e0 95       	com	r30
     e00:	e7 fb       	bst	r30, 7
     e02:	51 c1       	rjmp	.+674    	; 0x10a6 <__fp_inf>

00000e04 <__addsf3x>:
     e04:	e9 2f       	mov	r30, r25
     e06:	77 d1       	rcall	.+750    	; 0x10f6 <__fp_split3>
     e08:	80 f3       	brcs	.-32     	; 0xdea <__addsf3+0x8>
     e0a:	ba 17       	cp	r27, r26
     e0c:	62 07       	cpc	r22, r18
     e0e:	73 07       	cpc	r23, r19
     e10:	84 07       	cpc	r24, r20
     e12:	95 07       	cpc	r25, r21
     e14:	18 f0       	brcs	.+6      	; 0xe1c <__addsf3x+0x18>
     e16:	71 f4       	brne	.+28     	; 0xe34 <__addsf3x+0x30>
     e18:	9e f5       	brtc	.+102    	; 0xe80 <__addsf3x+0x7c>
     e1a:	8f c1       	rjmp	.+798    	; 0x113a <__fp_zero>
     e1c:	0e f4       	brtc	.+2      	; 0xe20 <__addsf3x+0x1c>
     e1e:	e0 95       	com	r30
     e20:	0b 2e       	mov	r0, r27
     e22:	ba 2f       	mov	r27, r26
     e24:	a0 2d       	mov	r26, r0
     e26:	0b 01       	movw	r0, r22
     e28:	b9 01       	movw	r22, r18
     e2a:	90 01       	movw	r18, r0
     e2c:	0c 01       	movw	r0, r24
     e2e:	ca 01       	movw	r24, r20
     e30:	a0 01       	movw	r20, r0
     e32:	11 24       	eor	r1, r1
     e34:	ff 27       	eor	r31, r31
     e36:	59 1b       	sub	r21, r25
     e38:	99 f0       	breq	.+38     	; 0xe60 <__addsf3x+0x5c>
     e3a:	59 3f       	cpi	r21, 0xF9	; 249
     e3c:	50 f4       	brcc	.+20     	; 0xe52 <__addsf3x+0x4e>
     e3e:	50 3e       	cpi	r21, 0xE0	; 224
     e40:	68 f1       	brcs	.+90     	; 0xe9c <__addsf3x+0x98>
     e42:	1a 16       	cp	r1, r26
     e44:	f0 40       	sbci	r31, 0x00	; 0
     e46:	a2 2f       	mov	r26, r18
     e48:	23 2f       	mov	r18, r19
     e4a:	34 2f       	mov	r19, r20
     e4c:	44 27       	eor	r20, r20
     e4e:	58 5f       	subi	r21, 0xF8	; 248
     e50:	f3 cf       	rjmp	.-26     	; 0xe38 <__addsf3x+0x34>
     e52:	46 95       	lsr	r20
     e54:	37 95       	ror	r19
     e56:	27 95       	ror	r18
     e58:	a7 95       	ror	r26
     e5a:	f0 40       	sbci	r31, 0x00	; 0
     e5c:	53 95       	inc	r21
     e5e:	c9 f7       	brne	.-14     	; 0xe52 <__addsf3x+0x4e>
     e60:	7e f4       	brtc	.+30     	; 0xe80 <__addsf3x+0x7c>
     e62:	1f 16       	cp	r1, r31
     e64:	ba 0b       	sbc	r27, r26
     e66:	62 0b       	sbc	r22, r18
     e68:	73 0b       	sbc	r23, r19
     e6a:	84 0b       	sbc	r24, r20
     e6c:	ba f0       	brmi	.+46     	; 0xe9c <__addsf3x+0x98>
     e6e:	91 50       	subi	r25, 0x01	; 1
     e70:	a1 f0       	breq	.+40     	; 0xe9a <__addsf3x+0x96>
     e72:	ff 0f       	add	r31, r31
     e74:	bb 1f       	adc	r27, r27
     e76:	66 1f       	adc	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	c2 f7       	brpl	.-16     	; 0xe6e <__addsf3x+0x6a>
     e7e:	0e c0       	rjmp	.+28     	; 0xe9c <__addsf3x+0x98>
     e80:	ba 0f       	add	r27, r26
     e82:	62 1f       	adc	r22, r18
     e84:	73 1f       	adc	r23, r19
     e86:	84 1f       	adc	r24, r20
     e88:	48 f4       	brcc	.+18     	; 0xe9c <__addsf3x+0x98>
     e8a:	87 95       	ror	r24
     e8c:	77 95       	ror	r23
     e8e:	67 95       	ror	r22
     e90:	b7 95       	ror	r27
     e92:	f7 95       	ror	r31
     e94:	9e 3f       	cpi	r25, 0xFE	; 254
     e96:	08 f0       	brcs	.+2      	; 0xe9a <__addsf3x+0x96>
     e98:	b3 cf       	rjmp	.-154    	; 0xe00 <__addsf3+0x1e>
     e9a:	93 95       	inc	r25
     e9c:	88 0f       	add	r24, r24
     e9e:	08 f0       	brcs	.+2      	; 0xea2 <__addsf3x+0x9e>
     ea0:	99 27       	eor	r25, r25
     ea2:	ee 0f       	add	r30, r30
     ea4:	97 95       	ror	r25
     ea6:	87 95       	ror	r24
     ea8:	08 95       	ret

00000eaa <__cmpsf2>:
     eaa:	d9 d0       	rcall	.+434    	; 0x105e <__fp_cmp>
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <__cmpsf2+0x6>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	08 95       	ret

00000eb2 <__divsf3>:
     eb2:	0c d0       	rcall	.+24     	; 0xecc <__divsf3x>
     eb4:	0f c1       	rjmp	.+542    	; 0x10d4 <__fp_round>
     eb6:	07 d1       	rcall	.+526    	; 0x10c6 <__fp_pscB>
     eb8:	40 f0       	brcs	.+16     	; 0xeca <__divsf3+0x18>
     eba:	fe d0       	rcall	.+508    	; 0x10b8 <__fp_pscA>
     ebc:	30 f0       	brcs	.+12     	; 0xeca <__divsf3+0x18>
     ebe:	21 f4       	brne	.+8      	; 0xec8 <__divsf3+0x16>
     ec0:	5f 3f       	cpi	r21, 0xFF	; 255
     ec2:	19 f0       	breq	.+6      	; 0xeca <__divsf3+0x18>
     ec4:	f0 c0       	rjmp	.+480    	; 0x10a6 <__fp_inf>
     ec6:	51 11       	cpse	r21, r1
     ec8:	39 c1       	rjmp	.+626    	; 0x113c <__fp_szero>
     eca:	f3 c0       	rjmp	.+486    	; 0x10b2 <__fp_nan>

00000ecc <__divsf3x>:
     ecc:	14 d1       	rcall	.+552    	; 0x10f6 <__fp_split3>
     ece:	98 f3       	brcs	.-26     	; 0xeb6 <__divsf3+0x4>

00000ed0 <__divsf3_pse>:
     ed0:	99 23       	and	r25, r25
     ed2:	c9 f3       	breq	.-14     	; 0xec6 <__divsf3+0x14>
     ed4:	55 23       	and	r21, r21
     ed6:	b1 f3       	breq	.-20     	; 0xec4 <__divsf3+0x12>
     ed8:	95 1b       	sub	r25, r21
     eda:	55 0b       	sbc	r21, r21
     edc:	bb 27       	eor	r27, r27
     ede:	aa 27       	eor	r26, r26
     ee0:	62 17       	cp	r22, r18
     ee2:	73 07       	cpc	r23, r19
     ee4:	84 07       	cpc	r24, r20
     ee6:	38 f0       	brcs	.+14     	; 0xef6 <__divsf3_pse+0x26>
     ee8:	9f 5f       	subi	r25, 0xFF	; 255
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	22 0f       	add	r18, r18
     eee:	33 1f       	adc	r19, r19
     ef0:	44 1f       	adc	r20, r20
     ef2:	aa 1f       	adc	r26, r26
     ef4:	a9 f3       	breq	.-22     	; 0xee0 <__divsf3_pse+0x10>
     ef6:	33 d0       	rcall	.+102    	; 0xf5e <__divsf3_pse+0x8e>
     ef8:	0e 2e       	mov	r0, r30
     efa:	3a f0       	brmi	.+14     	; 0xf0a <__divsf3_pse+0x3a>
     efc:	e0 e8       	ldi	r30, 0x80	; 128
     efe:	30 d0       	rcall	.+96     	; 0xf60 <__divsf3_pse+0x90>
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	50 40       	sbci	r21, 0x00	; 0
     f04:	e6 95       	lsr	r30
     f06:	00 1c       	adc	r0, r0
     f08:	ca f7       	brpl	.-14     	; 0xefc <__divsf3_pse+0x2c>
     f0a:	29 d0       	rcall	.+82     	; 0xf5e <__divsf3_pse+0x8e>
     f0c:	fe 2f       	mov	r31, r30
     f0e:	27 d0       	rcall	.+78     	; 0xf5e <__divsf3_pse+0x8e>
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	bb 1f       	adc	r27, r27
     f18:	26 17       	cp	r18, r22
     f1a:	37 07       	cpc	r19, r23
     f1c:	48 07       	cpc	r20, r24
     f1e:	ab 07       	cpc	r26, r27
     f20:	b0 e8       	ldi	r27, 0x80	; 128
     f22:	09 f0       	breq	.+2      	; 0xf26 <__divsf3_pse+0x56>
     f24:	bb 0b       	sbc	r27, r27
     f26:	80 2d       	mov	r24, r0
     f28:	bf 01       	movw	r22, r30
     f2a:	ff 27       	eor	r31, r31
     f2c:	93 58       	subi	r25, 0x83	; 131
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	2a f0       	brmi	.+10     	; 0xf3c <__divsf3_pse+0x6c>
     f32:	9e 3f       	cpi	r25, 0xFE	; 254
     f34:	51 05       	cpc	r21, r1
     f36:	68 f0       	brcs	.+26     	; 0xf52 <__divsf3_pse+0x82>
     f38:	b6 c0       	rjmp	.+364    	; 0x10a6 <__fp_inf>
     f3a:	00 c1       	rjmp	.+512    	; 0x113c <__fp_szero>
     f3c:	5f 3f       	cpi	r21, 0xFF	; 255
     f3e:	ec f3       	brlt	.-6      	; 0xf3a <__divsf3_pse+0x6a>
     f40:	98 3e       	cpi	r25, 0xE8	; 232
     f42:	dc f3       	brlt	.-10     	; 0xf3a <__divsf3_pse+0x6a>
     f44:	86 95       	lsr	r24
     f46:	77 95       	ror	r23
     f48:	67 95       	ror	r22
     f4a:	b7 95       	ror	r27
     f4c:	f7 95       	ror	r31
     f4e:	9f 5f       	subi	r25, 0xFF	; 255
     f50:	c9 f7       	brne	.-14     	; 0xf44 <__divsf3_pse+0x74>
     f52:	88 0f       	add	r24, r24
     f54:	91 1d       	adc	r25, r1
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret
     f5e:	e1 e0       	ldi	r30, 0x01	; 1
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	bb 1f       	adc	r27, r27
     f68:	62 17       	cp	r22, r18
     f6a:	73 07       	cpc	r23, r19
     f6c:	84 07       	cpc	r24, r20
     f6e:	ba 07       	cpc	r27, r26
     f70:	20 f0       	brcs	.+8      	; 0xf7a <__divsf3_pse+0xaa>
     f72:	62 1b       	sub	r22, r18
     f74:	73 0b       	sbc	r23, r19
     f76:	84 0b       	sbc	r24, r20
     f78:	ba 0b       	sbc	r27, r26
     f7a:	ee 1f       	adc	r30, r30
     f7c:	88 f7       	brcc	.-30     	; 0xf60 <__divsf3_pse+0x90>
     f7e:	e0 95       	com	r30
     f80:	08 95       	ret

00000f82 <__fixsfsi>:
     f82:	04 d0       	rcall	.+8      	; 0xf8c <__fixunssfsi>
     f84:	68 94       	set
     f86:	b1 11       	cpse	r27, r1
     f88:	d9 c0       	rjmp	.+434    	; 0x113c <__fp_szero>
     f8a:	08 95       	ret

00000f8c <__fixunssfsi>:
     f8c:	bc d0       	rcall	.+376    	; 0x1106 <__fp_splitA>
     f8e:	88 f0       	brcs	.+34     	; 0xfb2 <__fixunssfsi+0x26>
     f90:	9f 57       	subi	r25, 0x7F	; 127
     f92:	90 f0       	brcs	.+36     	; 0xfb8 <__fixunssfsi+0x2c>
     f94:	b9 2f       	mov	r27, r25
     f96:	99 27       	eor	r25, r25
     f98:	b7 51       	subi	r27, 0x17	; 23
     f9a:	a0 f0       	brcs	.+40     	; 0xfc4 <__fixunssfsi+0x38>
     f9c:	d1 f0       	breq	.+52     	; 0xfd2 <__fixunssfsi+0x46>
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	1a f0       	brmi	.+6      	; 0xfae <__fixunssfsi+0x22>
     fa8:	ba 95       	dec	r27
     faa:	c9 f7       	brne	.-14     	; 0xf9e <__fixunssfsi+0x12>
     fac:	12 c0       	rjmp	.+36     	; 0xfd2 <__fixunssfsi+0x46>
     fae:	b1 30       	cpi	r27, 0x01	; 1
     fb0:	81 f0       	breq	.+32     	; 0xfd2 <__fixunssfsi+0x46>
     fb2:	c3 d0       	rcall	.+390    	; 0x113a <__fp_zero>
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	08 95       	ret
     fb8:	c0 c0       	rjmp	.+384    	; 0x113a <__fp_zero>
     fba:	67 2f       	mov	r22, r23
     fbc:	78 2f       	mov	r23, r24
     fbe:	88 27       	eor	r24, r24
     fc0:	b8 5f       	subi	r27, 0xF8	; 248
     fc2:	39 f0       	breq	.+14     	; 0xfd2 <__fixunssfsi+0x46>
     fc4:	b9 3f       	cpi	r27, 0xF9	; 249
     fc6:	cc f3       	brlt	.-14     	; 0xfba <__fixunssfsi+0x2e>
     fc8:	86 95       	lsr	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b3 95       	inc	r27
     fd0:	d9 f7       	brne	.-10     	; 0xfc8 <__fixunssfsi+0x3c>
     fd2:	3e f4       	brtc	.+14     	; 0xfe2 <__fixunssfsi+0x56>
     fd4:	90 95       	com	r25
     fd6:	80 95       	com	r24
     fd8:	70 95       	com	r23
     fda:	61 95       	neg	r22
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	08 95       	ret

00000fe4 <__floatunsisf>:
     fe4:	e8 94       	clt
     fe6:	09 c0       	rjmp	.+18     	; 0xffa <__floatsisf+0x12>

00000fe8 <__floatsisf>:
     fe8:	97 fb       	bst	r25, 7
     fea:	3e f4       	brtc	.+14     	; 0xffa <__floatsisf+0x12>
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	99 23       	and	r25, r25
     ffc:	a9 f0       	breq	.+42     	; 0x1028 <__floatsisf+0x40>
     ffe:	f9 2f       	mov	r31, r25
    1000:	96 e9       	ldi	r25, 0x96	; 150
    1002:	bb 27       	eor	r27, r27
    1004:	93 95       	inc	r25
    1006:	f6 95       	lsr	r31
    1008:	87 95       	ror	r24
    100a:	77 95       	ror	r23
    100c:	67 95       	ror	r22
    100e:	b7 95       	ror	r27
    1010:	f1 11       	cpse	r31, r1
    1012:	f8 cf       	rjmp	.-16     	; 0x1004 <__floatsisf+0x1c>
    1014:	fa f4       	brpl	.+62     	; 0x1054 <__floatsisf+0x6c>
    1016:	bb 0f       	add	r27, r27
    1018:	11 f4       	brne	.+4      	; 0x101e <__floatsisf+0x36>
    101a:	60 ff       	sbrs	r22, 0
    101c:	1b c0       	rjmp	.+54     	; 0x1054 <__floatsisf+0x6c>
    101e:	6f 5f       	subi	r22, 0xFF	; 255
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	16 c0       	rjmp	.+44     	; 0x1054 <__floatsisf+0x6c>
    1028:	88 23       	and	r24, r24
    102a:	11 f0       	breq	.+4      	; 0x1030 <__floatsisf+0x48>
    102c:	96 e9       	ldi	r25, 0x96	; 150
    102e:	11 c0       	rjmp	.+34     	; 0x1052 <__floatsisf+0x6a>
    1030:	77 23       	and	r23, r23
    1032:	21 f0       	breq	.+8      	; 0x103c <__floatsisf+0x54>
    1034:	9e e8       	ldi	r25, 0x8E	; 142
    1036:	87 2f       	mov	r24, r23
    1038:	76 2f       	mov	r23, r22
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <__floatsisf+0x5e>
    103c:	66 23       	and	r22, r22
    103e:	71 f0       	breq	.+28     	; 0x105c <__floatsisf+0x74>
    1040:	96 e8       	ldi	r25, 0x86	; 134
    1042:	86 2f       	mov	r24, r22
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	2a f0       	brmi	.+10     	; 0x1054 <__floatsisf+0x6c>
    104a:	9a 95       	dec	r25
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	da f7       	brpl	.-10     	; 0x104a <__floatsisf+0x62>
    1054:	88 0f       	add	r24, r24
    1056:	96 95       	lsr	r25
    1058:	87 95       	ror	r24
    105a:	97 f9       	bld	r25, 7
    105c:	08 95       	ret

0000105e <__fp_cmp>:
    105e:	99 0f       	add	r25, r25
    1060:	00 08       	sbc	r0, r0
    1062:	55 0f       	add	r21, r21
    1064:	aa 0b       	sbc	r26, r26
    1066:	e0 e8       	ldi	r30, 0x80	; 128
    1068:	fe ef       	ldi	r31, 0xFE	; 254
    106a:	16 16       	cp	r1, r22
    106c:	17 06       	cpc	r1, r23
    106e:	e8 07       	cpc	r30, r24
    1070:	f9 07       	cpc	r31, r25
    1072:	c0 f0       	brcs	.+48     	; 0x10a4 <__fp_cmp+0x46>
    1074:	12 16       	cp	r1, r18
    1076:	13 06       	cpc	r1, r19
    1078:	e4 07       	cpc	r30, r20
    107a:	f5 07       	cpc	r31, r21
    107c:	98 f0       	brcs	.+38     	; 0x10a4 <__fp_cmp+0x46>
    107e:	62 1b       	sub	r22, r18
    1080:	73 0b       	sbc	r23, r19
    1082:	84 0b       	sbc	r24, r20
    1084:	95 0b       	sbc	r25, r21
    1086:	39 f4       	brne	.+14     	; 0x1096 <__fp_cmp+0x38>
    1088:	0a 26       	eor	r0, r26
    108a:	61 f0       	breq	.+24     	; 0x10a4 <__fp_cmp+0x46>
    108c:	23 2b       	or	r18, r19
    108e:	24 2b       	or	r18, r20
    1090:	25 2b       	or	r18, r21
    1092:	21 f4       	brne	.+8      	; 0x109c <__fp_cmp+0x3e>
    1094:	08 95       	ret
    1096:	0a 26       	eor	r0, r26
    1098:	09 f4       	brne	.+2      	; 0x109c <__fp_cmp+0x3e>
    109a:	a1 40       	sbci	r26, 0x01	; 1
    109c:	a6 95       	lsr	r26
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	81 1d       	adc	r24, r1
    10a2:	81 1d       	adc	r24, r1
    10a4:	08 95       	ret

000010a6 <__fp_inf>:
    10a6:	97 f9       	bld	r25, 7
    10a8:	9f 67       	ori	r25, 0x7F	; 127
    10aa:	80 e8       	ldi	r24, 0x80	; 128
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	08 95       	ret

000010b2 <__fp_nan>:
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	80 ec       	ldi	r24, 0xC0	; 192
    10b6:	08 95       	ret

000010b8 <__fp_pscA>:
    10b8:	00 24       	eor	r0, r0
    10ba:	0a 94       	dec	r0
    10bc:	16 16       	cp	r1, r22
    10be:	17 06       	cpc	r1, r23
    10c0:	18 06       	cpc	r1, r24
    10c2:	09 06       	cpc	r0, r25
    10c4:	08 95       	ret

000010c6 <__fp_pscB>:
    10c6:	00 24       	eor	r0, r0
    10c8:	0a 94       	dec	r0
    10ca:	12 16       	cp	r1, r18
    10cc:	13 06       	cpc	r1, r19
    10ce:	14 06       	cpc	r1, r20
    10d0:	05 06       	cpc	r0, r21
    10d2:	08 95       	ret

000010d4 <__fp_round>:
    10d4:	09 2e       	mov	r0, r25
    10d6:	03 94       	inc	r0
    10d8:	00 0c       	add	r0, r0
    10da:	11 f4       	brne	.+4      	; 0x10e0 <__fp_round+0xc>
    10dc:	88 23       	and	r24, r24
    10de:	52 f0       	brmi	.+20     	; 0x10f4 <__fp_round+0x20>
    10e0:	bb 0f       	add	r27, r27
    10e2:	40 f4       	brcc	.+16     	; 0x10f4 <__fp_round+0x20>
    10e4:	bf 2b       	or	r27, r31
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__fp_round+0x18>
    10e8:	60 ff       	sbrs	r22, 0
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <__fp_round+0x20>
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <__fp_split3>:
    10f6:	57 fd       	sbrc	r21, 7
    10f8:	90 58       	subi	r25, 0x80	; 128
    10fa:	44 0f       	add	r20, r20
    10fc:	55 1f       	adc	r21, r21
    10fe:	59 f0       	breq	.+22     	; 0x1116 <__fp_splitA+0x10>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	71 f0       	breq	.+28     	; 0x1120 <__fp_splitA+0x1a>
    1104:	47 95       	ror	r20

00001106 <__fp_splitA>:
    1106:	88 0f       	add	r24, r24
    1108:	97 fb       	bst	r25, 7
    110a:	99 1f       	adc	r25, r25
    110c:	61 f0       	breq	.+24     	; 0x1126 <__fp_splitA+0x20>
    110e:	9f 3f       	cpi	r25, 0xFF	; 255
    1110:	79 f0       	breq	.+30     	; 0x1130 <__fp_splitA+0x2a>
    1112:	87 95       	ror	r24
    1114:	08 95       	ret
    1116:	12 16       	cp	r1, r18
    1118:	13 06       	cpc	r1, r19
    111a:	14 06       	cpc	r1, r20
    111c:	55 1f       	adc	r21, r21
    111e:	f2 cf       	rjmp	.-28     	; 0x1104 <__stack+0x5>
    1120:	46 95       	lsr	r20
    1122:	f1 df       	rcall	.-30     	; 0x1106 <__fp_splitA>
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <__fp_splitA+0x30>
    1126:	16 16       	cp	r1, r22
    1128:	17 06       	cpc	r1, r23
    112a:	18 06       	cpc	r1, r24
    112c:	99 1f       	adc	r25, r25
    112e:	f1 cf       	rjmp	.-30     	; 0x1112 <__fp_splitA+0xc>
    1130:	86 95       	lsr	r24
    1132:	71 05       	cpc	r23, r1
    1134:	61 05       	cpc	r22, r1
    1136:	08 94       	sec
    1138:	08 95       	ret

0000113a <__fp_zero>:
    113a:	e8 94       	clt

0000113c <__fp_szero>:
    113c:	bb 27       	eor	r27, r27
    113e:	66 27       	eor	r22, r22
    1140:	77 27       	eor	r23, r23
    1142:	cb 01       	movw	r24, r22
    1144:	97 f9       	bld	r25, 7
    1146:	08 95       	ret

00001148 <__gesf2>:
    1148:	8a df       	rcall	.-236    	; 0x105e <__fp_cmp>
    114a:	08 f4       	brcc	.+2      	; 0x114e <__gesf2+0x6>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	08 95       	ret

00001150 <__mulsf3>:
    1150:	0b d0       	rcall	.+22     	; 0x1168 <__mulsf3x>
    1152:	c0 cf       	rjmp	.-128    	; 0x10d4 <__fp_round>
    1154:	b1 df       	rcall	.-158    	; 0x10b8 <__fp_pscA>
    1156:	28 f0       	brcs	.+10     	; 0x1162 <__mulsf3+0x12>
    1158:	b6 df       	rcall	.-148    	; 0x10c6 <__fp_pscB>
    115a:	18 f0       	brcs	.+6      	; 0x1162 <__mulsf3+0x12>
    115c:	95 23       	and	r25, r21
    115e:	09 f0       	breq	.+2      	; 0x1162 <__mulsf3+0x12>
    1160:	a2 cf       	rjmp	.-188    	; 0x10a6 <__fp_inf>
    1162:	a7 cf       	rjmp	.-178    	; 0x10b2 <__fp_nan>
    1164:	11 24       	eor	r1, r1
    1166:	ea cf       	rjmp	.-44     	; 0x113c <__fp_szero>

00001168 <__mulsf3x>:
    1168:	c6 df       	rcall	.-116    	; 0x10f6 <__fp_split3>
    116a:	a0 f3       	brcs	.-24     	; 0x1154 <__mulsf3+0x4>

0000116c <__mulsf3_pse>:
    116c:	95 9f       	mul	r25, r21
    116e:	d1 f3       	breq	.-12     	; 0x1164 <__mulsf3+0x14>
    1170:	95 0f       	add	r25, r21
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	55 1f       	adc	r21, r21
    1176:	62 9f       	mul	r22, r18
    1178:	f0 01       	movw	r30, r0
    117a:	72 9f       	mul	r23, r18
    117c:	bb 27       	eor	r27, r27
    117e:	f0 0d       	add	r31, r0
    1180:	b1 1d       	adc	r27, r1
    1182:	63 9f       	mul	r22, r19
    1184:	aa 27       	eor	r26, r26
    1186:	f0 0d       	add	r31, r0
    1188:	b1 1d       	adc	r27, r1
    118a:	aa 1f       	adc	r26, r26
    118c:	64 9f       	mul	r22, r20
    118e:	66 27       	eor	r22, r22
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	66 1f       	adc	r22, r22
    1196:	82 9f       	mul	r24, r18
    1198:	22 27       	eor	r18, r18
    119a:	b0 0d       	add	r27, r0
    119c:	a1 1d       	adc	r26, r1
    119e:	62 1f       	adc	r22, r18
    11a0:	73 9f       	mul	r23, r19
    11a2:	b0 0d       	add	r27, r0
    11a4:	a1 1d       	adc	r26, r1
    11a6:	62 1f       	adc	r22, r18
    11a8:	83 9f       	mul	r24, r19
    11aa:	a0 0d       	add	r26, r0
    11ac:	61 1d       	adc	r22, r1
    11ae:	22 1f       	adc	r18, r18
    11b0:	74 9f       	mul	r23, r20
    11b2:	33 27       	eor	r19, r19
    11b4:	a0 0d       	add	r26, r0
    11b6:	61 1d       	adc	r22, r1
    11b8:	23 1f       	adc	r18, r19
    11ba:	84 9f       	mul	r24, r20
    11bc:	60 0d       	add	r22, r0
    11be:	21 1d       	adc	r18, r1
    11c0:	82 2f       	mov	r24, r18
    11c2:	76 2f       	mov	r23, r22
    11c4:	6a 2f       	mov	r22, r26
    11c6:	11 24       	eor	r1, r1
    11c8:	9f 57       	subi	r25, 0x7F	; 127
    11ca:	50 40       	sbci	r21, 0x00	; 0
    11cc:	8a f0       	brmi	.+34     	; 0x11f0 <__mulsf3_pse+0x84>
    11ce:	e1 f0       	breq	.+56     	; 0x1208 <__mulsf3_pse+0x9c>
    11d0:	88 23       	and	r24, r24
    11d2:	4a f0       	brmi	.+18     	; 0x11e6 <__mulsf3_pse+0x7a>
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	bb 1f       	adc	r27, r27
    11da:	66 1f       	adc	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	91 50       	subi	r25, 0x01	; 1
    11e2:	50 40       	sbci	r21, 0x00	; 0
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <__mulsf3_pse+0x64>
    11e6:	9e 3f       	cpi	r25, 0xFE	; 254
    11e8:	51 05       	cpc	r21, r1
    11ea:	70 f0       	brcs	.+28     	; 0x1208 <__mulsf3_pse+0x9c>
    11ec:	5c cf       	rjmp	.-328    	; 0x10a6 <__fp_inf>
    11ee:	a6 cf       	rjmp	.-180    	; 0x113c <__fp_szero>
    11f0:	5f 3f       	cpi	r21, 0xFF	; 255
    11f2:	ec f3       	brlt	.-6      	; 0x11ee <__mulsf3_pse+0x82>
    11f4:	98 3e       	cpi	r25, 0xE8	; 232
    11f6:	dc f3       	brlt	.-10     	; 0x11ee <__mulsf3_pse+0x82>
    11f8:	86 95       	lsr	r24
    11fa:	77 95       	ror	r23
    11fc:	67 95       	ror	r22
    11fe:	b7 95       	ror	r27
    1200:	f7 95       	ror	r31
    1202:	e7 95       	ror	r30
    1204:	9f 5f       	subi	r25, 0xFF	; 255
    1206:	c1 f7       	brne	.-16     	; 0x11f8 <__mulsf3_pse+0x8c>
    1208:	fe 2b       	or	r31, r30
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret

00001216 <__udivmodsi4>:
    1216:	a1 e2       	ldi	r26, 0x21	; 33
    1218:	1a 2e       	mov	r1, r26
    121a:	aa 1b       	sub	r26, r26
    121c:	bb 1b       	sub	r27, r27
    121e:	fd 01       	movw	r30, r26
    1220:	0d c0       	rjmp	.+26     	; 0x123c <__udivmodsi4_ep>

00001222 <__udivmodsi4_loop>:
    1222:	aa 1f       	adc	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	ee 1f       	adc	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	a2 17       	cp	r26, r18
    122c:	b3 07       	cpc	r27, r19
    122e:	e4 07       	cpc	r30, r20
    1230:	f5 07       	cpc	r31, r21
    1232:	20 f0       	brcs	.+8      	; 0x123c <__udivmodsi4_ep>
    1234:	a2 1b       	sub	r26, r18
    1236:	b3 0b       	sbc	r27, r19
    1238:	e4 0b       	sbc	r30, r20
    123a:	f5 0b       	sbc	r31, r21

0000123c <__udivmodsi4_ep>:
    123c:	66 1f       	adc	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	1a 94       	dec	r1
    1246:	69 f7       	brne	.-38     	; 0x1222 <__udivmodsi4_loop>
    1248:	60 95       	com	r22
    124a:	70 95       	com	r23
    124c:	80 95       	com	r24
    124e:	90 95       	com	r25
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	bd 01       	movw	r22, r26
    1256:	cf 01       	movw	r24, r30
    1258:	08 95       	ret

0000125a <atoi>:
    125a:	fc 01       	movw	r30, r24
    125c:	88 27       	eor	r24, r24
    125e:	99 27       	eor	r25, r25
    1260:	e8 94       	clt
    1262:	21 91       	ld	r18, Z+
    1264:	20 32       	cpi	r18, 0x20	; 32
    1266:	e9 f3       	breq	.-6      	; 0x1262 <atoi+0x8>
    1268:	29 30       	cpi	r18, 0x09	; 9
    126a:	10 f0       	brcs	.+4      	; 0x1270 <atoi+0x16>
    126c:	2e 30       	cpi	r18, 0x0E	; 14
    126e:	c8 f3       	brcs	.-14     	; 0x1262 <atoi+0x8>
    1270:	2b 32       	cpi	r18, 0x2B	; 43
    1272:	39 f0       	breq	.+14     	; 0x1282 <atoi+0x28>
    1274:	2d 32       	cpi	r18, 0x2D	; 45
    1276:	31 f4       	brne	.+12     	; 0x1284 <atoi+0x2a>
    1278:	68 94       	set
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <atoi+0x28>
    127c:	15 d0       	rcall	.+42     	; 0x12a8 <__mulhi_const_10>
    127e:	82 0f       	add	r24, r18
    1280:	91 1d       	adc	r25, r1
    1282:	21 91       	ld	r18, Z+
    1284:	20 53       	subi	r18, 0x30	; 48
    1286:	2a 30       	cpi	r18, 0x0A	; 10
    1288:	c8 f3       	brcs	.-14     	; 0x127c <atoi+0x22>
    128a:	1e f4       	brtc	.+6      	; 0x1292 <atoi+0x38>
    128c:	90 95       	com	r25
    128e:	81 95       	neg	r24
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__itoa_ncheck>:
    1294:	bb 27       	eor	r27, r27
    1296:	4a 30       	cpi	r20, 0x0A	; 10
    1298:	31 f4       	brne	.+12     	; 0x12a6 <__itoa_ncheck+0x12>
    129a:	99 23       	and	r25, r25
    129c:	22 f4       	brpl	.+8      	; 0x12a6 <__itoa_ncheck+0x12>
    129e:	bd e2       	ldi	r27, 0x2D	; 45
    12a0:	90 95       	com	r25
    12a2:	81 95       	neg	r24
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <__utoa_common>

000012a8 <__mulhi_const_10>:
    12a8:	7a e0       	ldi	r23, 0x0A	; 10
    12aa:	97 9f       	mul	r25, r23
    12ac:	90 2d       	mov	r25, r0
    12ae:	87 9f       	mul	r24, r23
    12b0:	80 2d       	mov	r24, r0
    12b2:	91 0d       	add	r25, r1
    12b4:	11 24       	eor	r1, r1
    12b6:	08 95       	ret

000012b8 <__utoa_ncheck>:
    12b8:	bb 27       	eor	r27, r27

000012ba <__utoa_common>:
    12ba:	fb 01       	movw	r30, r22
    12bc:	55 27       	eor	r21, r21
    12be:	aa 27       	eor	r26, r26
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	aa 1f       	adc	r26, r26
    12c6:	a4 17       	cp	r26, r20
    12c8:	10 f0       	brcs	.+4      	; 0x12ce <__utoa_common+0x14>
    12ca:	a4 1b       	sub	r26, r20
    12cc:	83 95       	inc	r24
    12ce:	50 51       	subi	r21, 0x10	; 16
    12d0:	b9 f7       	brne	.-18     	; 0x12c0 <__utoa_common+0x6>
    12d2:	a0 5d       	subi	r26, 0xD0	; 208
    12d4:	aa 33       	cpi	r26, 0x3A	; 58
    12d6:	08 f0       	brcs	.+2      	; 0x12da <__utoa_common+0x20>
    12d8:	a9 5d       	subi	r26, 0xD9	; 217
    12da:	a1 93       	st	Z+, r26
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	79 f7       	brne	.-34     	; 0x12be <__utoa_common+0x4>
    12e0:	b1 11       	cpse	r27, r1
    12e2:	b1 93       	st	Z+, r27
    12e4:	11 92       	st	Z+, r1
    12e6:	cb 01       	movw	r24, r22
    12e8:	00 c0       	rjmp	.+0      	; 0x12ea <strrev>

000012ea <strrev>:
    12ea:	dc 01       	movw	r26, r24
    12ec:	fc 01       	movw	r30, r24
    12ee:	67 2f       	mov	r22, r23
    12f0:	71 91       	ld	r23, Z+
    12f2:	77 23       	and	r23, r23
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <strrev+0x4>
    12f6:	32 97       	sbiw	r30, 0x02	; 2
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <strrev+0x18>
    12fa:	7c 91       	ld	r23, X
    12fc:	6d 93       	st	X+, r22
    12fe:	70 83       	st	Z, r23
    1300:	62 91       	ld	r22, -Z
    1302:	ae 17       	cp	r26, r30
    1304:	bf 07       	cpc	r27, r31
    1306:	c8 f3       	brcs	.-14     	; 0x12fa <strrev+0x10>
    1308:	08 95       	ret

0000130a <_exit>:
    130a:	f8 94       	cli

0000130c <__stop_program>:
    130c:	ff cf       	rjmp	.-2      	; 0x130c <__stop_program>
